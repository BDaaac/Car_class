import torch

# –ó–∞–≥—Ä—É–∑–∫–∞ fine-tuned –º–æ–¥–µ–ª–∏
checkpoint = torch.load('training_results/finetuned_best_model.pth', map_location='cpu', weights_only=False)

print("üèÜ –¢–û–ß–ù–´–ï –ú–ï–¢–†–ò–ö–ò FINE-TUNED –ú–û–î–ï–õ–ò:")
print("=" * 50)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
metrics = {
    "Best F1": checkpoint.get("best_f1", "N/A"),
    "Standard F1": checkpoint.get("f1_standard", "N/A"),
    "Improved F1": checkpoint.get("f1_improved", "N/A"),
    "Damage Recall (Std)": checkpoint.get("damage_recall_std", "N/A"),
    "Damage Recall (Imp)": checkpoint.get("damage_recall_imp", "N/A"),
    "Major Recall (Std)": checkpoint.get("major_recall_std", "N/A"),
    "Major Recall (Imp)": checkpoint.get("major_recall_imp", "N/A"),
    "Composite (Std)": checkpoint.get("composite_std", "N/A"),
    "Composite (Imp)": checkpoint.get("composite_imp", "N/A"),
    "Epoch": checkpoint.get("epoch", "N/A")
}

for key, value in metrics.items():
    if isinstance(value, float):
        print(f"üìä {key}: {value:.6f}")
    else:
        print(f"üìä {key}: {value}")

print("\nüéØ –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï:")
print(f"üèÜ –õ—É—á—à–∏–π F1 Score: {metrics['Best F1']:.6f}")
print(f"‚ö° –£–ª—É—á—à–µ–Ω–Ω—ã–π F1: {metrics['Improved F1']:.6f}") 
print(f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {metrics['Damage Recall (Imp)']:.4f}")
print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {metrics['Major Recall (Imp)']:.4f}")