"""
–ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è inference - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è car damage detection
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º "—Å—ã—Ä—ã–µ" softmax –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏!
"""
import torch
import torch.nn.functional as F
import numpy as np
from sklearn.metrics import f1_score, precision_recall_curve
from multiclass_damage_model import MulticlassDamageModel, DamageClassifier

class CalibratedDamageClassifier:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: –ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è, —á–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ
    """
    
    def __init__(self, model_path, device='cpu'):
        self.device = device
        self.model = MulticlassDamageModel(num_classes=3)
        self.model.to(device)
        self.model.eval()
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (–ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
        self.thresholds = {
            'confidence_min': 0.7,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            'damage_threshold': 0.5,     # –ü–æ—Ä–æ–≥ "–µ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è" (minor+major vs no)
            'major_threshold': 0.55,     # –ñ–µ—Å—Ç–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è major damage
            'minor_threshold': 0.45,     # –ú—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è minor damage (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
        }
        
        if model_path:
            self.load_model(model_path)
    
    def load_model(self, model_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø–æ—Ä–æ–≥–∞–º–∏"""
        checkpoint = torch.load(model_path, map_location=self.device)
        
        if 'model_state_dict' in checkpoint:
            self.model.load_state_dict(checkpoint['model_state_dict'])
        else:
            self.model.load_state_dict(checkpoint)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'calibrated_thresholds' in checkpoint:
            self.thresholds.update(checkpoint['calibrated_thresholds'])
            
        self.model.eval()
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –ø–æ—Ä–æ–≥–∞–º–∏: {self.thresholds}")
    
    def predict_with_calibrated_thresholds(self, image_tensor):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
        
        –õ–æ–≥–∏–∫–∞:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        3. –ï—Å–ª–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ -> requires_inspection
        """
        with torch.no_grad():
            if image_tensor.dim() == 3:
                image_tensor = image_tensor.unsqueeze(0)
            
            image_tensor = image_tensor.to(self.device)
            logits = self.model(image_tensor)
            probabilities = F.softmax(logits, dim=1)
            
            probs = probabilities.cpu().numpy()[0]  # [p_no, p_minor, p_major]
            p_no, p_minor, p_major = probs
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            max_confidence = float(np.max(probs))
            
            # –û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
            damage_prob = p_minor + p_major
            
            # –ö–ê–õ–ò–ë–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô
            
            # 1. –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å -> –æ—Å–º–æ—Ç—Ä
            if max_confidence < self.thresholds['confidence_min']:
                return {
                    'status': 'requires_inspection',
                    'description': f'–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({max_confidence:.2f}), —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä',
                    'confidence': max_confidence,
                    'probabilities': probs,
                    'reason': 'low_confidence'
                }
            
            # 2. –ß–µ—Ç–∫–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
            if p_no >= 0.6 and damage_prob < self.thresholds['damage_threshold']:
                return {
                    'status': 'no_damage',
                    'description': f'–ë–µ–∑ –≤–∏–¥–∏–º—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π ({p_no:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)',
                    'confidence': max_confidence,
                    'probabilities': probs,
                    'reason': 'clear_no_damage'
                }
            
            # 3. –ñ–µ—Å—Ç–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è major damage (—Å—Ç—Ä–æ–≥–∏–π, —á—Ç–æ–±—ã –Ω–µ false positive)
            if p_major >= self.thresholds['major_threshold']:
                return {
                    'status': 'major_damage',
                    'description': f'–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è ({p_major:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)',
                    'confidence': max_confidence,
                    'probabilities': probs,
                    'reason': 'clear_major_damage'
                }
            
            # 4. –ú—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è minor damage (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–ª–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã)
            if p_minor >= self.thresholds['minor_threshold']:
                return {
                    'status': 'minor_damage',
                    'description': f'–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è ({p_minor:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)',
                    'confidence': max_confidence,
                    'probabilities': probs,
                    'reason': 'detected_minor_damage'
                }
            
            # 5. –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ—è—Å–Ω–æ –∫–∞–∫–∏–µ
            if damage_prob >= self.thresholds['damage_threshold']:
                return {
                    'status': 'requires_inspection',
                    'description': f'–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è ({damage_prob:.2f}), —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä',
                    'confidence': max_confidence,
                    'probabilities': probs,
                    'reason': 'suspected_damage'
                }
            
            # 6. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (–Ω–æ —Å –º–µ–Ω—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)
            return {
                'status': 'no_damage',
                'description': f'–í–µ—Ä–æ—è—Ç–Ω–æ –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π ({p_no:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)',
                'confidence': max_confidence,
                'probabilities': probs,
                'reason': 'probable_no_damage'
            }

def calibrate_thresholds_on_validation(model, val_loader, device='cpu'):
    """
    –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ
    –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ F1-score –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    """
    print("üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    model.eval()
    all_probs = []
    all_labels = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            probs = F.softmax(outputs, dim=1)
            
            all_probs.extend(probs.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())
    
    all_probs = np.array(all_probs)
    all_labels = np.array(all_labels)
    
    print(f"   üìä –°–æ–±—Ä–∞–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(all_labels)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    calibrated_thresholds = {}
    
    # 1. –ü–æ—Ä–æ–≥ –¥–ª—è "damage vs no_damage"
    damage_probs = all_probs[:, 1] + all_probs[:, 2]  # minor + major
    damage_labels = (all_labels > 0).astype(int)  # 0 –µ—Å–ª–∏ no_damage, 1 –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏ –∏—â–µ–º –ª—É—á—à–∏–π F1
    best_f1 = 0
    best_damage_threshold = 0.5
    
    for threshold in np.arange(0.3, 0.8, 0.05):
        pred_damage = (damage_probs >= threshold).astype(int)
        f1 = f1_score(damage_labels, pred_damage)
        
        if f1 > best_f1:
            best_f1 = f1
            best_damage_threshold = threshold
    
    calibrated_thresholds['damage_threshold'] = best_damage_threshold
    print(f"   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ damage: {best_damage_threshold:.3f} (F1: {best_f1:.3f})")
    
    # 2. –ü–æ—Ä–æ–≥ –¥–ª—è major damage (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)
    major_labels = (all_labels == 2).astype(int)
    major_probs = all_probs[:, 2]
    
    best_f1 = 0
    best_major_threshold = 0.55
    
    for threshold in np.arange(0.4, 0.8, 0.05):
        pred_major = (major_probs >= threshold).astype(int)
        f1 = f1_score(major_labels, pred_major)
        
        if f1 > best_f1:
            best_f1 = f1
            best_major_threshold = threshold
    
    # –î–µ–ª–∞–µ–º –ø–æ—Ä–æ–≥ —á—É—Ç—å –∂–µ—Å—Ç—á–µ –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–∑–º–∞
    calibrated_thresholds['major_threshold'] = max(best_major_threshold, 0.55)
    print(f"   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ major: {calibrated_thresholds['major_threshold']:.3f}")
    
    # 3. –ü–æ—Ä–æ–≥ –¥–ª—è minor damage (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    minor_labels = (all_labels == 1).astype(int)
    minor_probs = all_probs[:, 1]
    
    best_f1 = 0
    best_minor_threshold = 0.45
    
    for threshold in np.arange(0.3, 0.7, 0.05):
        pred_minor = (minor_probs >= threshold).astype(int)
        f1 = f1_score(minor_labels, pred_minor)
        
        if f1 > best_f1:
            best_f1 = f1
            best_minor_threshold = threshold
    
    # –î–µ–ª–∞–µ–º –ø–æ—Ä–æ–≥ –º—è–≥—á–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ recall
    calibrated_thresholds['minor_threshold'] = min(best_minor_threshold, 0.45)
    print(f"   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ minor: {calibrated_thresholds['minor_threshold']:.3f}")
    
    # 4. –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
    max_probs = np.max(all_probs, axis=1)
    confidence_threshold = np.percentile(max_probs, 30)  # 30% —Å–∞–º—ã—Ö –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö -> inspection
    calibrated_thresholds['confidence_min'] = max(confidence_threshold, 0.6)
    
    print(f"   ‚úÖ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {calibrated_thresholds['confidence_min']:.3f}")
    
    return calibrated_thresholds

def test_calibrated_classifier():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    test_cases = [
        ([0.8, 0.15, 0.05], "–ß–µ—Ç–∫–æ–µ no_damage"),
        ([0.3, 0.6, 0.1], "–ß–µ—Ç–∫–æ–µ minor_damage"), 
        ([0.2, 0.3, 0.5], "–ß–µ—Ç–∫–æ–µ major_damage"),
        ([0.4, 0.35, 0.25], "–ù–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π"),
        ([0.6, 0.25, 0.15], "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ damage"),
    ]
    
    classifier = CalibratedDamageClassifier(model_path=None)
    
    for probs, description in test_cases:
        # –°–æ–∑–¥–∞–µ–º fake tensor
        fake_tensor = torch.zeros(1, 3)
        fake_tensor[0] = torch.tensor(probs)
        
        # –û–±—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        with torch.no_grad():
            p_no, p_minor, p_major = probs
            max_confidence = max(probs)
            damage_prob = p_minor + p_major
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É
            if max_confidence < classifier.thresholds['confidence_min']:
                status = 'requires_inspection'
                reason = 'low_confidence'
            elif p_no >= 0.6 and damage_prob < classifier.thresholds['damage_threshold']:
                status = 'no_damage'
                reason = 'clear_no_damage'
            elif p_major >= classifier.thresholds['major_threshold']:
                status = 'major_damage'
                reason = 'clear_major_damage'
            elif p_minor >= classifier.thresholds['minor_threshold']:
                status = 'minor_damage'
                reason = 'detected_minor_damage'
            elif damage_prob >= classifier.thresholds['damage_threshold']:
                status = 'requires_inspection'
                reason = 'suspected_damage'
            else:
                status = 'no_damage'
                reason = 'probable_no_damage'
        
        print(f"   {description}:")
        print(f"      Probs: {probs}")
        print(f"      Status: {status}")
        print(f"      Reason: {reason}")
        print()

if __name__ == "__main__":
    test_calibrated_classifier()