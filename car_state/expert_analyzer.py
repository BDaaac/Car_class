import torch
import torch.nn as nn
from torchvision import transforms, models
from PIL import Image, ImageFilter, ImageStat
import torch.nn.functional as F
import os
import sys
import numpy as np

class MulticlassDamageModel(nn.Module):
    def __init__(self, num_classes=3, dropout=0.6):
        super().__init__()
        self.backbone = models.resnet50(weights=models.ResNet50_Weights.IMAGENET1K_V2)
        self.backbone.fc = nn.Identity()
        
        self.classifier = nn.Sequential(
            nn.Dropout(dropout),
            nn.Linear(2048, 1024),
            nn.ReLU(inplace=True),
            nn.BatchNorm1d(1024),
            nn.Dropout(dropout * 0.5),
            nn.Linear(1024, 512),
            nn.ReLU(inplace=True),
            nn.BatchNorm1d(512),
            nn.Dropout(dropout * 0.25),
            nn.Linear(512, num_classes)
        )
        
    def forward(self, x):
        x = self.backbone.conv1(x)
        x = self.backbone.bn1(x)
        x = self.backbone.relu(x)
        x = self.backbone.maxpool(x)
        
        x = self.backbone.layer1(x)
        x = self.backbone.layer2(x)
        x = self.backbone.layer3(x)
        x = self.backbone.layer4(x)
        
        x = self.backbone.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.classifier(x)
        
        return x

def analyze_dirt_level(image):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    img_array = np.array(image)
    
    # –¶–≤–µ—Ç–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    unique_colors_r = len(np.unique(img_array[:,:,0]))
    unique_colors_g = len(np.unique(img_array[:,:,1])) 
    unique_colors_b = len(np.unique(img_array[:,:,2]))
    color_diversity = (unique_colors_r + unique_colors_g + unique_colors_b) / 3
    
    # –ö–æ–Ω—Ç—Ä–∞—Å—Ç
    gray = image.convert('L')
    contrast = ImageStat.Stat(gray).stddev[0]
    
    # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
    hsv = image.convert('HSV')
    hsv_array = np.array(hsv)
    saturation = np.mean(hsv_array[:,:,1])
    
    # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    brown_mask = (
        (img_array[:,:,0] > img_array[:,:,2]) &
        (img_array[:,:,1] > img_array[:,:,2]) &
        (img_array[:,:,0] < 150) &
        (img_array[:,:,1] < 120)
    )
    brown_ratio = np.sum(brown_mask) / (img_array.shape[0] * img_array.shape[1])
    
    # –ß–µ—Ç–∫–æ—Å—Ç—å –∫—Ä–∞–µ–≤
    edge_image = gray.filter(ImageFilter.FIND_EDGES)
    edge_intensity = np.mean(np.array(edge_image))
    
    # –Ø—Ä–∫–æ—Å—Ç—å
    brightness = np.mean(img_array)
    
    # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≥—Ä—è–∑–∏
    dirt_score = 0
    
    if color_diversity < 80:
        dirt_score += 2
    elif color_diversity < 120:
        dirt_score += 1
    
    if contrast < 25:
        dirt_score += 2
    elif contrast < 40:
        dirt_score += 1
    
    if saturation < 60:
        dirt_score += 1.5
    elif saturation < 100:
        dirt_score += 0.5
    
    if brown_ratio > 0.15:
        dirt_score += 2
    elif brown_ratio > 0.08:
        dirt_score += 1
    
    if edge_intensity < 15:
        dirt_score += 1.5
    elif edge_intensity < 25:
        dirt_score += 0.5
    
    if brightness < 90:
        dirt_score += 1
    elif brightness < 110:
        dirt_score += 0.5
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
    if dirt_score >= 6:
        status = "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü§"
    elif dirt_score >= 4:
        status = "–≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü´"
    elif dirt_score >= 2:
        status = "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü®"
    elif dirt_score >= 1:
        status = "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è"
        emoji = "üü©"
    else:
        status = "–æ—á–µ–Ω—å —á–∏—Å—Ç–∞—è"
        emoji = "‚ú®"
    
    metrics = {
        'color_diversity': color_diversity,
        'contrast': contrast,
        'saturation': saturation,
        'brown_ratio': brown_ratio,
        'edge_intensity': edge_intensity,
        'brightness': brightness,
        'dirt_score': dirt_score
    }
    
    return status, emoji, dirt_score, metrics

def determine_repairability(predicted_class, confidence, major_damage_prob):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ —Ç–∞–∫—Å–∏
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–∑–æ–∫
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - repairability_status: "taxi_ready", "conditional_taxi", "repair_required", "taxi_banned"
    - repairability_message: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞
    - economic_assessment: –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–∫—Å–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!)
    TAXI_BAN_THRESHOLD = 75.0       # > 75% —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π = –ó–ê–ü–†–ï–¢ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ —Ç–∞–∫—Å–∏
    REPAIR_REQUIRED_THRESHOLD = 50.0 # 50-75% = –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô —Ä–µ–º–æ–Ω—Ç –ø–µ—Ä–µ–¥ –¥–æ–ø—É—Å–∫–æ–º
    CONDITIONAL_THRESHOLD = 25.0     # 25-50% = —É—Å–ª–æ–≤–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    MINOR_DAMAGE_TAXI_LIMIT = 40.0   # –¥–∞–∂–µ –º–µ–ª–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏–º–∏–¥–∂–∞
    
    if predicted_class == 'major_damage':
        if confidence > 0.8 and major_damage_prob > TAXI_BAN_THRESHOLD:
            return "taxi_banned", (
                "ÔøΩ –ê–í–¢–û–ú–û–ë–ò–õ–¨ –ó–ê–ü–†–ï–©–ï–ù –î–õ–Ø –†–ê–ë–û–¢–´ –í –¢–ê–ö–°–ò!",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   ÔøΩ –ü—Ä–µ–≤—ã—à–µ–Ω –ø—Ä–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ({TAXI_BAN_THRESHOLD}%)",
                "   ‚ö†Ô∏è –†–ò–°–ö–ò: –£–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ –≤–æ–¥–∏—Ç–µ–ª—è",
                "   üìâ –†–ï–ü–£–¢–ê–¶–ò–Ø: –°–µ—Ä—å–µ–∑–Ω—ã–π —É—â–µ—Ä–± –∏–º–∏–¥–∂—É —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞",
                "   ‚öñÔ∏è –ü–†–ê–í–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º",
                "   üéØ –†–ï–®–ï–ù–ò–ï: –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–∞—Ä–∫–∞, –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
            ), "safety_violation"
            
        elif confidence > 0.6 or major_damage_prob > REPAIR_REQUIRED_THRESHOLD:
            return "repair_required", (
                "üîß –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –†–ï–ú–û–ù–¢ –ü–ï–†–ï–î –î–û–ü–£–°–ö–û–ú –ö –†–ê–ë–û–¢–ï",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   ‚öñÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ–ø—É—Å–∫–∞ –∫ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º ({REPAIR_REQUIRED_THRESHOLD}%)",
                "   ÔøΩ –°–¢–ê–¢–£–°: –í–†–ï–ú–ï–ù–ù–û –ò–°–ö–õ–Æ–ß–ï–ù –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏",
                "   üîß –¢–†–ï–ë–û–í–ê–ù–ò–Ø: –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç + —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä",
                "   ÔøΩ –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: 150-500 —Ç—ã—Å. —Ä—É–±.",
                "   üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞",
                "   ‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: 2-4 –Ω–µ–¥–µ–ª–∏"
            ), "mandatory_repair"
            
        elif major_damage_prob > CONDITIONAL_THRESHOLD:
            return "conditional_taxi", (
                "‚ö†Ô∏è –£–°–õ–û–í–ù–û –î–û–ü–£–°–¢–ò–ú –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   üî∂ –í –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–π –∑–æ–Ω–µ ({CONDITIONAL_THRESHOLD}-{REPAIR_REQUIRED_THRESHOLD}%)",
                "   ÔøΩ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏",
                "   ÔøΩ –ó–ê–ü–†–ï–¢: –ú–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–µ —Ä–µ–π—Å—ã –∏ VIP-–∫–ª–∏–µ–Ω—Ç—ã",
                "   üîç –ö–û–ù–¢–†–û–õ–¨: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä—ã",
                "   üíº –°–¢–†–ê–•–û–í–ê–ù–ò–ï: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã",
                "   ‚è∞ –ü–õ–ê–ù: –ü–ª–∞–Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞"
            ), "restricted_operation"
        else:
            return "conditional_taxi", (
                "üîß –ö–û–°–ú–ï–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ú–û–ù–¢ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                "   ‚úÖ –î–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–∫—Å–∏",
                "   üé® –ò–ú–ò–î–ñ: –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–∏–º—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã",
                "   üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 50-150 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫—É",
                "   ÔøΩ –†–ï–ô–¢–ò–ù–ì: –ü–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏"
            ), "cosmetic_repair"
    
    elif predicted_class == 'minor_damage':
        minor_damage_prob = 100 - major_damage_prob  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if confidence > 0.6 and minor_damage_prob > MINOR_DAMAGE_TAXI_LIMIT:
            return "conditional_taxi", (
                "üîß –ö–û–°–ú–ï–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ú–û–ù–¢ –ñ–ï–õ–ê–¢–ï–õ–ï–ù –î–õ–Ø –¢–ê–ö–°–ò",
                f"   ÔøΩ –ó–∞–º–µ—Ç–Ω—ã–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã: {minor_damage_prob:.1f}%",
                "   ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è",
                "   ÔøΩ –ò–ú–ò–î–ñ: –ú–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "   üí∞ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ: 30-100 —Ç—ã—Å. —Ä—É–±.",
                "   üì± –û–¢–ó–´–í–´: –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –≤–Ω–µ—à–Ω–µ–º –≤–∏–¥–µ",
                "   üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–ª–∞–Ω–æ–≤—ã–π –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç"
            ), "image_improvement"
        else:
            return "taxi_ready", (
                "‚úÖ –ü–†–ò–ì–û–î–ï–ù –î–õ–Ø –†–ê–ë–û–¢–´ –í –¢–ê–ö–°–ò",
                "   üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã",
                "   üöó –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫",
                "   üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 10-50 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –º–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç",
                "   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞: 1-3 –¥–Ω—è",
                "   üèÜ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞"
            ), "minor_maintenance"
    
    else:  # no_damage
        return "taxi_ready", (
            "üèÜ –ò–î–ï–ê–õ–ï–ù –î–õ–Ø –ü–†–ï–ú–ò–£–ú –¢–ê–ö–°–ò-–°–ï–†–í–ò–°–ê",
            "   ‚ú® –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
            "   ÔøΩ –ö–õ–ê–°–°: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è VIP –∏ –±–∏–∑–Ω–µ—Å-–∫–ª–∏–µ–Ω—Ç–æ–≤",
            "   üìà –†–ï–ô–¢–ò–ù–ì: –û–±–µ—Å–ø–µ—á–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "   üíé –¢–ê–†–ò–§–´: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–µ",
            "   üéØ –°–¢–ê–¢–£–°: –≠—Ç–∞–ª–æ–Ω –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"
        ), "premium_ready"

def generate_expert_assessment(predicted_class, confidence, probabilities, class_names, dirt_status, dirt_score, dirt_metrics):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    
    assessment = []
    
    # 1. –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô
    assessment.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    assessment.append("‚îÇ                    üîç –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô                     ‚îÇ")
    assessment.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    assessment.append("ÔøΩ –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø –°–ï–†–í–ò–°–ê –¢–ê–ö–°–ò")
    assessment.append("=" * 70)
    
    # 1. –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø
    assessment.append("\\nüìã –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:")
    
    no_damage_prob = probabilities[0] * 100
    minor_damage_prob = probabilities[1] * 100
    major_damage_prob = probabilities[2] * 100
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ä–µ–º–æ–Ω—Ç–æ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏
    repairability_status, repairability_msgs, economic_status = determine_repairability(
        predicted_class, confidence, major_damage_prob
    )
    
    if predicted_class == 'no_damage':
        if confidence > 0.85:
            assessment.append("‚úÖ –û–¢–õ–ò–ß–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
            assessment.append(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {no_damage_prob:.1f}%")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≥–æ–¥–µ–Ω –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂–µ.")
        elif confidence > 0.7:
            assessment.append("‚úÖ –•–û–†–û–®–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏.")
            assessment.append(f"   –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ({no_damage_prob:.1f}%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
            assessment.append(f"   –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫ –º–µ–ª–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤: {minor_damage_prob:.1f}%")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏–≥–æ–¥–µ–Ω –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä.")
        else:
            assessment.append("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ.")
            assessment.append(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {no_damage_prob:.1f}%")
            assessment.append(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–µ–ª–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {minor_damage_prob:.1f}%")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π.")
    
    elif predicted_class == 'minor_damage':
        if confidence > 0.8:
            assessment.append("üîß –ú–ï–õ–ö–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –∫—É–∑–æ–≤–∞.")
            assessment.append(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–≥–Ω–æ–∑–µ: {confidence*100:.1f}%")
            assessment.append("   –•–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã, –º–µ–ª–∫–∏–µ –≤–º—è—Ç–∏–Ω—ã, –ø–æ—Ç–µ—Ä—Ç–æ—Å—Ç–∏ –õ–ö–ü")
            assessment.append("   –í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ù–ï –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è")
            assessment.append("   –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ 5-15%")
        elif confidence > 0.6:
            assessment.append("üîß –í–ï–†–û–Ø–¢–ù–´–ï –ú–ï–õ–ö–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø: –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤.")
            assessment.append(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–µ–ª–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {minor_damage_prob:.1f}%")
            assessment.append(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {no_damage_prob:.1f}%")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤.")
        else:
            assessment.append("‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
            assessment.append("   –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
    
    else:  # major_damage
        if confidence > 0.9:
            assessment.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø: –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!")
            assessment.append("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ù–ï –ü–†–ò–ì–û–î–ï–ù –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!")
            assessment.append("   –•–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—É–∑–æ–≤–∞, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
            assessment.append(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%")
        elif confidence > 0.8:
            assessment.append("üö® –°–ï–†–¨–ï–ó–ù–´–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –∫—É–∑–æ–≤–∞.")
            assessment.append(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–≥–Ω–æ–∑–µ: {confidence*100:.1f}%")
            assessment.append("   –•–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: –ì–ª—É–±–æ–∫–∏–µ –≤–º—è—Ç–∏–Ω—ã, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π, –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            assessment.append("   –í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ú–û–ñ–ï–¢ –í–õ–ò–Ø–¢–¨ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è")
            assessment.append("   –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (30-70%)")
        elif confidence > 0.6:
            assessment.append("‚ö†Ô∏è –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê –°–ï–†–¨–ï–ó–ù–´–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤.")
            assessment.append(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–†–û–ß–ù–ê–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞! –ù–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é!")
        else:
            assessment.append("‚ùó –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–ü–ê–°–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.")
            assessment.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –∫—É–∑–æ–≤–Ω–æ–º—É —Ä–µ–º–æ–Ω—Ç—É!")
    
    # 1.1. –û–¶–ï–ù–ö–ê –ü–†–ò–ì–û–î–ù–û–°–¢–ò –î–õ–Ø –¢–ê–ö–°–ò (–ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø)
    assessment.append("\\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    assessment.append("‚îÇ            ÔøΩ –ê–ù–ê–õ–ò–ó –ü–†–ò–ì–û–î–ù–û–°–¢–ò –î–õ–Ø –°–ï–†–í–ò–°–ê –¢–ê–ö–°–ò             ‚îÇ")
    assessment.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    for msg in repairability_msgs:
        assessment.append(msg)
    
    # 2. –ê–ù–ê–õ–ò–ó –ó–ê–ì–†–Ø–ó–ù–ï–ù–ù–û–°–¢–ò
    assessment.append("\\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    assessment.append("‚îÇ                  üßº –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ß–ò–°–¢–û–¢–´ –ò –£–•–û–î–ê           ‚îÇ")
    assessment.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    if dirt_status == "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è":
        assessment.append("üü§ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ì–†–Ø–ó–ù–ï–ù–ò–ï:")
        assessment.append("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—Ä–∞–π–Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        assessment.append("   ‚Ä¢ –¢–æ–ª—Å—Ç—ã–π —Å–ª–æ–π –≥—Ä—è–∑–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        assessment.append("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–¥ —Å–ª–æ–µ–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π")
        assessment.append("   ‚Ä¢ –°–†–û–ß–ù–ê–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ –∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        assessment.append("   ‚Ä¢ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ - –ü–û–í–¢–û–†–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞")
    elif dirt_status == "–≥—Ä—è–∑–Ω–∞—è":
        assessment.append("üü´ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–ì–†–Ø–ó–ù–ï–ù–ò–ï:")
        assessment.append("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ")
        assessment.append(f"   ‚Ä¢ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {dirt_score:.1f}/10 (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)")
        assessment.append("   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        assessment.append("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Å–º–æ—Ç—Ä–æ–º")
        assessment.append("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã —Å–∫—Ä—ã—Ç—ã–µ –º–µ–ª–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ–¥ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è–º–∏")
    elif dirt_status == "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è":
        assessment.append("üü® –£–ú–ï–†–ï–ù–ù–û–ï –ó–ê–ì–†–Ø–ó–ù–ï–ù–ò–ï:")
        assessment.append("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø—Ä–∏–µ–º–ª–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∏—Å—Ç–æ—Ç—ã")
        assessment.append(f"   ‚Ä¢ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {dirt_score:.1f}/10 (–Ω–æ—Ä–º–∞)")
        assessment.append("   ‚Ä¢ –õ–µ–≥–∫–∏–π –Ω–∞–ª–µ—Ç –ø—ã–ª–∏ –Ω–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ")
        assessment.append("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è –º–æ–π–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–∞")
        assessment.append("   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ —Å–Ω–∏–∂–µ–Ω–∞")
    elif dirt_status == "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è":
        assessment.append("üü© –•–û–†–û–®–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ß–ò–°–¢–û–¢–´:")
        assessment.append("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        assessment.append(f"   ‚Ä¢ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {dirt_score:.1f}/10 (–æ—Ç–ª–∏—á–Ω–æ)")
        assessment.append("   ‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—É–∑–æ–≤–∞")
        assessment.append("   ‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        assessment.append("   ‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é")
    else:  # –æ—á–µ–Ω—å —á–∏—Å—Ç–∞—è
        assessment.append("‚ú® –ò–î–ï–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ß–ò–°–¢–û–¢–´:")
        assessment.append("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É—Ö–æ–¥–∞")
        assessment.append(f"   ‚Ä¢ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: {dirt_score:.1f}/10 (—ç—Ç–∞–ª–æ–Ω)")
        assessment.append("   ‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        assessment.append("   ‚Ä¢ –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ–± –æ—Ç–ª–∏—á–Ω–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏")
        assessment.append("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    # 3. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ê–ù–ê–õ–ò–ó–ê
    assessment.append("\\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    assessment.append("‚îÇ              üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò              ‚îÇ")
    assessment.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    assessment.append(f"   ‚Ä¢ –¶–≤–µ—Ç–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {dirt_metrics['color_diversity']:.1f} (–Ω–æ—Ä–º–∞: >120)")
    assessment.append(f"   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {dirt_metrics['contrast']:.1f} (–Ω–æ—Ä–º–∞: >40)")
    assessment.append(f"   ‚Ä¢ –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤: {dirt_metrics['saturation']:.1f} (–Ω–æ—Ä–º–∞: >100)")
    assessment.append(f"   ‚Ä¢ –ß–µ—Ç–∫–æ—Å—Ç—å –∫—Ä–∞–µ–≤: {dirt_metrics['edge_intensity']:.1f} (–Ω–æ—Ä–º–∞: >25)")
    assessment.append(f"   ‚Ä¢ –û–±—â–∞—è —è—Ä–∫–æ—Å—Ç—å: {dirt_metrics['brightness']:.1f} (–Ω–æ—Ä–º–∞: >110)")
    
    # 4. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –¢–ê–ö–°–û–ü–ê–†–ö–ê
    assessment.append("\\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    assessment.append("‚îÇ             ÔøΩ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø –°–ï–†–í–ò–°–ê –¢–ê–ö–°–ò                    ‚îÇ")
    assessment.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ç–∞–∫—Å–∏
    if repairability_status == "taxi_ready":
        if economic_status == "premium_ready":
            assessment.append("üèÜ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù –î–õ–Ø –ü–†–ï–ú–ò–£–ú-–°–ï–ì–ú–ï–ù–¢–ê:")
            assessment.append("   ‚Ä¢ –û–¢–õ–ò–ß–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤")
            assessment.append("   ‚Ä¢ üåü –ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: –ü—Ä–µ–º–∏—É–º/–ë–∏–∑–Ω–µ—Å")
            assessment.append("   ‚Ä¢ üíé –¢–∞—Ä–∏—Ñ—ã: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
            assessment.append("   ‚Ä¢ üì± –†–µ–π—Ç–∏–Ω–≥: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ (4.8-5.0)")
            assessment.append("   ‚Ä¢ üéØ –°–¢–ê–¢–£–°: –≠—Ç–∞–ª–æ–Ω –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞")
        else:  # minor_maintenance
            assessment.append("‚úÖ –î–û–ü–£–©–ï–ù –ö –†–ê–ë–û–¢–ï –í –¢–ê–ö–°–ò:")
            assessment.append("   ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫")
            assessment.append("   ‚Ä¢ üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç: 1-3 –¥–Ω—è –ø—Ä–æ—Å—Ç–æ—è")
            assessment.append("   ‚Ä¢ üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 10-50 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫—É")
            assessment.append("   ‚Ä¢ üìä –ö–ª–∞—Å—Å: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π/–ö–æ–º—Ñ–æ—Ä—Ç")
            assessment.append("   ‚Ä¢ üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –ø–æ—Å–ª–µ –º–µ–ª–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
            
    elif repairability_status == "conditional_taxi":
        if economic_status == "image_improvement":
            assessment.append("üîß –î–û–ü–£–©–ï–ù –° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ï–ô –†–ï–ú–û–ù–¢–ê:")
            assessment.append("   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ù–ï –Ω–∞—Ä—É—à–µ–Ω–∞, –º–æ–∂–Ω–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å")
            assessment.append("   ‚Ä¢ üìâ –ò–ú–ò–î–ñ: –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            assessment.append("   ‚Ä¢ üí∞ –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: 30-100 —Ç—ã—Å. —Ä—É–±.")
            assessment.append("   ‚Ä¢ üì± –†–ò–°–ö: –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞")
            assessment.append("   ‚Ä¢ ‚è∞ –ü–õ–ê–ù: –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞")
        elif economic_status == "cosmetic_repair":
            assessment.append("‚úÖ –£–°–õ–û–í–ù–û –î–û–ü–£–©–ï–ù –ö –†–ê–ë–û–¢–ï:")
            assessment.append("   ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏")
            assessment.append("   ‚Ä¢ üé® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
            assessment.append("   ‚Ä¢ üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 50-150 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥")
            assessment.append("   ‚Ä¢ üèÜ –¶–ï–õ–¨: –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞")
        else:  # restricted_operation
            assessment.append("‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ù–´–ô –î–û–ü–£–°–ö –ö –†–ê–ë–û–¢–ï:")
            assessment.append("   ‚Ä¢ üö´ –ó–ê–ü–†–ï–¢: VIP-–∫–ª–∏–µ–Ω—Ç—ã –∏ –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–µ —Ä–µ–π—Å—ã")
            assessment.append("   ‚Ä¢ üìç –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏")
            assessment.append("   ‚Ä¢ üîç –ö–û–ù–¢–†–û–õ–¨: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã")
            assessment.append("   ‚Ä¢ üíº –°–¢–†–ê–•–û–í–ê–ù–ò–ï: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –û–°–ê–ì–û")
            assessment.append("   ‚Ä¢ ‚è∞ –°–†–û–ö: –î–æ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞ (–º–∞–∫—Å. –º–µ—Å—è—Ü)")
            
    elif repairability_status == "repair_required":
        assessment.append("ÔøΩ –í–†–ï–ú–ï–ù–ù–û –ò–°–ö–õ–Æ–ß–ï–ù - –¢–†–ï–ë–£–ï–¢ –†–ï–ú–û–ù–¢–ê:")
        assessment.append("   ‚Ä¢ üö´ –°–¢–ê–¢–£–°: –ó–ê–ü–†–ï–©–ï–ù –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º")
        assessment.append("   ‚Ä¢ ‚ö†Ô∏è –ü–†–ò–ß–ò–ù–ê: –£–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
        assessment.append("   ‚Ä¢ üîß –¢–†–ï–ë–û–í–ê–ù–ò–Ø: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç")
        assessment.append("   ‚Ä¢ üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 150-500 —Ç—ã—Å. —Ä—É–±.")
        assessment.append("   ‚Ä¢ üìã –ü–†–û–¶–ï–î–£–†–ê: –†–µ–º–æ–Ω—Ç ‚Üí —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä ‚Üí —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        assessment.append("   ‚Ä¢ ‚è±Ô∏è –ü–†–û–°–¢–û–ô: 2-4 –Ω–µ–¥–µ–ª–∏ –±–µ–∑ –¥–æ—Ö–æ–¥–æ–≤")
        assessment.append("   ‚Ä¢ üí° –†–ï–®–ï–ù–ò–ï: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥–∞–∂—É –≤–º–µ—Å—Ç–æ —Ä–µ–º–æ–Ω—Ç–∞")
        
    else:  # taxi_banned
        assessment.append("üö´ –ò–°–ö–õ–Æ–ß–ï–ù –ò–ó –¢–ê–ö–°–û–ü–ê–†–ö–ê –ù–ê–í–°–ï–ì–î–ê:")
        assessment.append("   ‚Ä¢ ‚ò†Ô∏è –û–ü–ê–°–ù–û–°–¢–¨: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        assessment.append("   ‚Ä¢ ‚öñÔ∏è –ü–†–ê–í–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –¢–°")
        assessment.append("   ‚Ä¢ üìâ –†–ï–ü–£–¢–ê–¶–ò–Ø: –°–µ—Ä—å–µ–∑–Ω—ã–π —É—â–µ—Ä–± –∏–º–∏–¥–∂—É –∫–æ–º–ø–∞–Ω–∏–∏")
        assessment.append("   ‚Ä¢ üíÄ –°–¢–†–ê–•–û–í–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è –ø–æ–∫—Ä—ã—Ç–∏—è")
        assessment.append("   ‚Ä¢ üóëÔ∏è –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏")
        assessment.append("   ‚Ä¢ ‚ùå –†–ï–ú–û–ù–¢ –ë–ï–°–ü–û–õ–ï–ó–ï–ù: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∏—Å—Ç–æ—Ç–µ –¥–ª—è —Ç–∞–∫—Å–∏
    if dirt_score > 6.0:
        assessment.append("\\nüßº –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–û –ß–ò–°–¢–û–¢–ï –î–õ–Ø –¢–ê–ö–°–ò:")
        assessment.append("   ‚Ä¢ üö® –ö–†–ò–¢–ò–ß–ù–û: –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–ª–∏—à–∫–æ–º –≥—Ä—è–∑–Ω—ã–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
        assessment.append("   ‚Ä¢ üìâ –ò–ú–ò–î–ñ: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–∫—Å–∏")
        assessment.append("   ‚Ä¢ üîß –î–ï–ô–°–¢–í–ò–Ø: –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ + —Ö–∏–º—á–∏—Å—Ç–∫–∞")
        assessment.append("   ‚Ä¢ üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 3-8 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –¥–µ—Ç–µ–π–ª–∏–Ω–≥")
        assessment.append("   ‚Ä¢ ‚è∞ –°–†–û–ö: –î–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ª–∏–Ω–∏—é –º–∞–∫—Å–∏–º—É–º 1 –¥–µ–Ω—å")
    elif dirt_score > 4.0:
        assessment.append("\\nüßº –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ß–ò–°–¢–û–¢–ï:")
        assessment.append("   ‚Ä¢ üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã –Ω–∏–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞")
        assessment.append("   ‚Ä¢ üéØ –î–ï–ô–°–¢–í–ò–ï: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ª–∏–Ω–∏—é")
        assessment.append("   ‚Ä¢ üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 1.5-3 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –º–æ–π–∫—É")
        assessment.append("   ‚Ä¢ üèÜ –¶–ï–õ–¨: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–∏–¥–∂—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    
    # 5. –ü–†–ê–í–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –¢–ê–ö–°–û–ü–ê–†–ö–ê
    assessment.append("\\n‚öñÔ∏è –ü–†–ê–í–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–• –ü–ï–†–ï–í–û–ó–û–ö:")
    assessment.append("   ‚Ä¢ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫")
    assessment.append("   ‚Ä¢ –ò–ò-—Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞")
    assessment.append("   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: F1-score 94.4% (>5000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π)")
    assessment.append("   ‚Ä¢ –î–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ–ø—É—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä –≤ –ì–ò–ë–î–î")
    assessment.append("   ‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ª–µ–∂–∏—Ç –Ω–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ")
    
    assessment.append("\\n" + "=" * 70)
    
    return assessment

def load_model(model_path):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    model = MulticlassDamageModel(num_classes=3)
    checkpoint = torch.load(model_path, map_location=device, weights_only=False)
    
    if 'model_state_dict' in checkpoint:
        model.load_state_dict(checkpoint['model_state_dict'])
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –≠–ø–æ—Ö–∞: {checkpoint.get('epoch', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        if 'f1_score' in checkpoint:
            print(f"üìä F1-score –º–æ–¥–µ–ª–∏: {checkpoint['f1_score']:.4f}")
    else:
        model.load_state_dict(checkpoint)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
    
    model.to(device)
    model.eval()
    return model, device

def preprocess_image(image_path):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                           std=[0.229, 0.224, 0.225])
    ])
    
    image = Image.open(image_path).convert('RGB')
    image_tensor = transform(image).unsqueeze(0)
    
    return image_tensor, image

def predict_damage(model, image_tensor, device):
    class_names = ['no_damage', 'minor_damage', 'major_damage']
    
    with torch.no_grad():
        image_tensor = image_tensor.to(device)
        
        outputs = model(image_tensor)
        probabilities = F.softmax(outputs, dim=1)
        confidence, predicted = torch.max(probabilities, 1)
        
        probs = probabilities.cpu().numpy()[0]
        predicted_class = class_names[predicted.item()]
        confidence_score = confidence.item()
        
        return predicted_class, confidence_score, probs, class_names

def analyze_image_expert(image_filename):
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞"""
    data_folder = r"C:\\Users\\–î–∏–º–∞—à\\Desktop\\python\\hackaton\\data"
    model_path = r"C:\\Users\\–î–∏–º–∞—à\\Desktop\\python\\hackaton\\car_state\\training_results\\finetuned_best_model.pth"
    
    image_path = os.path.join(data_folder, image_filename)
    
    print("ÔøΩ –°–ò–°–¢–ï–ú–ê –ò–ò-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –î–õ–Ø –°–ï–†–í–ò–°–ê –¢–ê–ö–°–ò")
    print("üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫")
    print("="*70)
    print(f"üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: {image_filename}")
    
    if not os.path.exists(image_path):
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        return
    
    try:
        print("\\nüì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–º–æ–¥–µ–ª–∏...")
        model, device = load_model(model_path)
        
        print("üñºÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        image_tensor, original_image = preprocess_image(image_path)
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {original_image.size[0]}√ó{original_image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏...")
        dirt_status, dirt_emoji, dirt_score, dirt_metrics = analyze_dirt_level(original_image)
        
        print("üß† –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π...")
        predicted_class, confidence, probabilities, class_names = predict_damage(model, image_tensor, device)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        expert_report = generate_expert_assessment(
            predicted_class, confidence, probabilities, class_names, 
            dirt_status, dirt_score, dirt_metrics
        )
        
        # –í—ã–≤–æ–¥–∏–º —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        print("\\n" + "="*70)
        print("üìù –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("="*70)
        for line in expert_report:
            print(line)
        
        # –ö—Ä–∞—Ç–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("\\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ                üìã –ö–†–ê–¢–ö–ò–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï                   ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {predicted_class}")
        print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {confidence:.1%}")
        print(f"üßº –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã: {dirt_emoji} {dirt_status} (–∏–Ω–¥–µ–∫—Å: {dirt_score:.1f})")
        
        print("\\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ                üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–ï–†–û–Ø–¢–ù–û–°–¢–ï–ô                   ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        for name, prob in zip(class_names, probabilities):
            bar_length = int(prob * 30)
            bar = "‚ñà" * bar_length + "‚ñë" * (30 - bar_length)
            
            if name == 'no_damage':
                emoji = "‚úÖ"
                display_name = "–ë–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
            elif name == 'minor_damage':
                emoji = "üîß"
                display_name = "–ú–µ–ª–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
            else:
                emoji = "üö®"
                display_name = "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
                
            print(f"   {emoji} {display_name:20}: {prob:.1%} |{bar}|")
        
        print("\\n" + "="*70)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    if len(sys.argv) > 1:
        image_filename = sys.argv[1]
    else:
        image_filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ").strip()
        
        if not image_filename:
            print("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ!")
            return
    
    analyze_image_expert(image_filename)

if __name__ == "__main__":
    main()