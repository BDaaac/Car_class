"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
========================================================================
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—è –∑–æ–Ω –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
"""

import sys
import os
import cv2
import numpy as np
from car_zone_detector import CarDamageAnalyzer, test_car_analysis
import matplotlib.pyplot as plt

def create_demo_car_image(filename="demo_car.jpg"):
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    
    # –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
    img = np.ones((600, 800, 3), dtype=np.uint8) * 220  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫—É–∑–æ–≤
    cv2.rectangle(img, (200, 150), (600, 450), (100, 100, 100), -1)  # –û—Å–Ω–æ–≤–Ω–æ–π –∫—É–∑–æ–≤
    
    # –ö—Ä—ã—à–∞
    cv2.rectangle(img, (250, 50), (550, 200), (80, 80, 80), -1)
    
    # –ö–∞–ø–æ—Ç
    cv2.rectangle(img, (250, 200), (550, 300), (120, 120, 120), -1)
    
    # –ë–∞–≥–∞–∂–Ω–∏–∫  
    cv2.rectangle(img, (250, 350), (550, 450), (90, 90, 90), -1)
    
    # –ö–æ–ª—ë—Å–∞
    cv2.circle(img, (250, 450), 40, (50, 50, 50), -1)  # –ü–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ
    cv2.circle(img, (550, 450), 40, (50, 50, 50), -1)  # –ü–µ—Ä–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ
    cv2.circle(img, (250, 150), 40, (50, 50, 50), -1)  # –ó–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ
    cv2.circle(img, (550, 150), 40, (50, 50, 50), -1)  # –ó–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ
    
    # –î–æ–±–∞–≤–ª—è–µ–º "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # –¶–∞—Ä–∞–ø–∏–Ω–∞ –Ω–∞ –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    cv2.line(img, (150, 200), (180, 280), (255, 0, 0), 3)
    cv2.line(img, (160, 190), (190, 270), (255, 0, 0), 2)
    
    # –í–º—è—Ç–∏–Ω–∞ –Ω–∞ –∫–∞–ø–æ—Ç–µ (—Ç—ë–º–Ω–æ–µ –ø—è—Ç–Ω–æ)
    cv2.circle(img, (400, 250), 30, (60, 60, 60), -1)
    
    # –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏
    cv2.rectangle(img, (520, 380), (580, 420), (200, 0, 0), -1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    cv2.imwrite(filename, img)
    print(f"‚úÖ –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {filename}")
    return filename

def run_demo_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üöó –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ó–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ê–í–¢–û–ú–û–ë–ò–õ–Ø")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    demo_image = create_demo_car_image()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_path = "training_results/best_model.pth"
    
    if os.path.exists(model_path):
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model_path}")
        use_real_model = True
    else:
        print("‚ö†Ô∏è –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        model_path = None
        use_real_model = False
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    print("\nüîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        report = test_car_analysis(demo_image, model_path)
        
        if report:
            print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –û–±—â–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {report.overall_integrity:.1f}%")
            print(f"üèÜ –û—Ü–µ–Ω–∫–∞: {report.overall_grade}")
            print(f"üîß –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö –∑–æ–Ω: {report.damaged_zones}/{report.total_zones}")
            
            return True
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

def demo_zone_detection_only():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–æ–Ω (–±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π)"""
    
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ï–¢–ï–ö–¶–ò–ò –ó–û–ù")
    print("-" * 40)
    
    from car_zone_detector import CarZoneDetector
    
    # –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = CarZoneDetector()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    demo_image = "demo_car.jpg"
    if not os.path.exists(demo_image):
        create_demo_car_image(demo_image)
    
    image = cv2.imread(demo_image)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∑–æ–Ω—ã
    zones = detector.detect_zones(image_rgb)
    
    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–æ–Ω: {len(zones)}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–Ω—ã
    annotated = image_rgb.copy()
    
    colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), 
              (255, 0, 255), (0, 255, 255), (128, 128, 128)]
    
    for i, (zone_name, (x1, y1, x2, y2)) in enumerate(zones.items()):
        color = colors[i % len(colors)]
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.rectangle(annotated, (x1, y1), (x2, y2), color, 2)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∑–æ–Ω—É
        cv2.putText(annotated, zone_name, (x1, y1-10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
        
        print(f"  üìç {zone_name}: ({x1}, {y1}) -> ({x2}, {y2})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = "zones_detection_demo.jpg"
    annotated_bgr = cv2.cvtColor(annotated, cv2.COLOR_RGB2BGR)
    cv2.imwrite(output_path, annotated_bgr)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

def show_comparison_with_without_model():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–æ–º —Å –º–æ–¥–µ–ª—å—é –∏ –±–µ–∑ –Ω–µ—ë"""
    
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï: –° –ú–û–î–ï–õ–¨–Æ vs –ë–ï–ó –ú–û–î–ï–õ–ò")
    print("-" * 45)
    
    demo_image = "demo_car.jpg"
    if not os.path.exists(demo_image):
        create_demo_car_image(demo_image)
    
    # –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –º–æ–¥–µ–ª–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    print("\n1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ë–ï–ó –º–æ–¥–µ–ª–∏ (—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):")
    from car_zone_detector import CarDamageAnalyzer
    
    analyzer_dummy = CarDamageAnalyzer("dummy_path")
    report_dummy = analyzer_dummy.analyze_car(demo_image)
    
    print(f"   –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {report_dummy.overall_integrity:.1f}%")
    print(f"   –û—Ü–µ–Ω–∫–∞: {report_dummy.overall_grade}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å –º–æ–¥–µ–ª—å—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    model_path = "training_results/best_model.pth"
    if os.path.exists(model_path):
        print("\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –° –º–æ–¥–µ–ª—å—é:")
        try:
            analyzer_real = CarDamageAnalyzer(model_path)
            report_real = analyzer_real.analyze_car(demo_image)
            
            print(f"   –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {report_real.overall_integrity:.1f}%")
            print(f"   –û—Ü–µ–Ω–∫–∞: {report_real.overall_grade}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º
            print("\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º:")
            for dummy_zone, real_zone in zip(report_dummy.zones, report_real.zones):
                print(f"   {dummy_zone.zone_name}:")
                print(f"     –ë–µ–∑ –º–æ–¥–µ–ª–∏: {dummy_zone.integrity_score:.1f}% ({dummy_zone.damage_class})")
                print(f"     –° –º–æ–¥–µ–ª—å—é:  {real_zone.integrity_score:.1f}% ({real_zone.damage_class})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    else:
        print("\n2Ô∏è‚É£ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    print("üîß –°–ò–°–¢–ï–ú–ê –ó–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ê–í–¢–û–ú–û–ë–ò–õ–Ø - –î–ï–ú–û")
    print("=" * 55)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        # 1. –î–µ–º–æ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–æ–Ω
        demo_zone_detection_only()
        
        # 2. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑  
        run_demo_analysis()
        
        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é –∏ –±–µ–∑
        show_comparison_with_without_model()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("   ‚Ä¢ demo_car.jpg - –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print("   ‚Ä¢ zones_detection_demo.jpg - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω")
        print("   ‚Ä¢ test_car_analysis_result.jpg - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
        print("   ‚Ä¢ test_car_analysis_result.json - JSON –æ—Ç—á—ë—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()