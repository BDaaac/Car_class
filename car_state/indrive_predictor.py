"""
–ü—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è inDrive - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: —á–∏—Å—Ç—ã–π/–≥—Ä—è–∑–Ω—ã–π, —Ü–µ–ª—ã–π/–±–∏—Ç—ã–π
"""
import torch
import torch.nn.functional as F
from PIL import Image
import torchvision.transforms as transforms
from pathlib import Path
import json
from typing import Dict, Tuple, Optional

from multiclass_damage_model import MulticlassDamageModel, create_validation_transforms

class InDriveCarPredictor:
    """–ü—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è inDrive"""
    
    def __init__(self, model_path: str, device: str = 'cpu'):
        self.device = device
        self.model = self._load_model(model_path)
        self.transforms = create_validation_transforms()
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è inDrive
        self.class_mapping = {
            0: {
                "status": "–û–¢–õ–ò–ß–ù–û–ï",
                "safety": "–ë–ï–ó–û–ü–ê–°–ù–û", 
                "trust": "–í–´–°–û–ö–û–ï",
                "description": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
                "color": "green",
                "score": 100
            },
            1: {
                "status": "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï",
                "safety": "–ë–ï–ó–û–ü–ê–°–ù–û",
                "trust": "–°–†–ï–î–ù–ï–ï", 
                "description": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏",
                "color": "yellow",
                "score": 75
            },
            2: {
                "status": "–ü–õ–û–•–û–ï",
                "safety": "–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò",
                "trust": "–ù–ò–ó–ö–û–ï",
                "description": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏", 
                "color": "red",
                "score": 40
            }
        }
    
    def _load_model(self, model_path: str) -> MulticlassDamageModel:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        model = MulticlassDamageModel(num_classes=3)
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å checkpoint
        try:
            checkpoint = torch.load(model_path, map_location=self.device)
            
            if isinstance(checkpoint, dict):
                if 'model_state_dict' in checkpoint:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                    model.load_state_dict(checkpoint['model_state_dict'])
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
                    if 'val_f1' in checkpoint:
                        print(f"   F1-score: {checkpoint['val_f1']:.4f}")
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ –≤–µ—Å–∞
                    model.load_state_dict(checkpoint)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–µ—Å–∞ –º–æ–¥–µ–ª–∏")
            else:
                # –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                model.load_state_dict(checkpoint)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise
            
        model.to(self.device)
        model.eval()
        return model
    
    def predict_image(self, image_path: str) -> Dict:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è inDrive
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path).convert('RGB')
            input_tensor = self.transforms(image).unsqueeze(0).to(self.device)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            with torch.no_grad():
                logits = self.model(input_tensor)
                probabilities = F.softmax(logits, dim=1)[0]
                predicted_class = torch.argmax(logits, dim=1).item()
                confidence = probabilities[predicted_class].item()
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è inDrive
            class_info = self.class_mapping[predicted_class]
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
            prob_analysis = {
                "excellent_condition": float(probabilities[0]),  # no_damage
                "minor_issues": float(probabilities[1]),         # minor_damage  
                "serious_damage": float(probabilities[2])        # major_damage
            }
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è/–ø–∞—Å—Å–∞–∂–∏—Ä–∞
            recommendations = self._generate_recommendations(predicted_class, confidence)
            
            result = {
                "image_path": image_path,
                "predicted_class": predicted_class,
                "confidence": round(confidence * 100, 2),
                "status": class_info["status"],
                "safety_level": class_info["safety"],
                "trust_level": class_info["trust"],
                "description": class_info["description"],
                "color_indicator": class_info["color"],
                "quality_score": class_info["score"],
                "probability_breakdown": prob_analysis,
                "recommendations": recommendations,
                "timestamp": str(Path(image_path).stat().st_mtime)
            }
            
            return result
            
        except Exception as e:
            return {
                "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
                "image_path": image_path
            }
    
    def _generate_recommendations(self, predicted_class: int, confidence: float) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è inDrive"""
        
        if predicted_class == 0:  # –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return {
                "for_passenger": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–µ–∑–¥–∫–∞ –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π.",
                "for_driver": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ç–∞–∫–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!",
                "action": "proceed",
                "priority": "low"
            }
        elif predicted_class == 1:  # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
            return {
                "for_passenger": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏–º–µ–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã, –Ω–æ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –ø–æ–µ–∑–¥–∫–∏.",
                "for_driver": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –º–µ–ª–∫–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.",
                "action": "proceed_with_note",
                "priority": "medium"
            }
        else:  # –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return {
                "for_passenger": "‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
                "for_driver": "üö´ –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ª–∏–Ω–∏—é.",
                "action": "review_required",
                "priority": "high"
            }
    
    def batch_predict(self, image_dir: str, output_file: str = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        image_dir = Path(image_dir)
        results = []
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp']
        image_files = []
        
        for ext in image_extensions:
            image_files.extend(image_dir.glob(ext))
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        for img_path in image_files:
            result = self.predict_image(str(img_path))
            results.append(result)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if results:
            stats = self._calculate_batch_stats(results)
        else:
            stats = {"error": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        batch_result = {
            "total_images": len(image_files),
            "results": results,
            "statistics": stats,
            "analysis_date": str(Path().cwd())
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(batch_result, f, indent=2, ensure_ascii=False)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        
        return batch_result
    
    def _calculate_batch_stats(self, results: list) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Ä—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        valid_results = [r for r in results if 'error' not in r]
        
        if not valid_results:
            return {"error": "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"}
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º
        class_counts = {0: 0, 1: 0, 2: 0}
        confidence_sum = 0
        
        for result in valid_results:
            class_counts[result['predicted_class']] += 1
            confidence_sum += result['confidence']
        
        total = len(valid_results)
        
        return {
            "excellent_condition": {
                "count": class_counts[0],
                "percentage": round(class_counts[0] / total * 100, 1)
            },
            "minor_issues": {
                "count": class_counts[1], 
                "percentage": round(class_counts[1] / total * 100, 1)
            },
            "serious_damage": {
                "count": class_counts[2],
                "percentage": round(class_counts[2] / total * 100, 1)
            },
            "average_confidence": round(confidence_sum / total, 2),
            "safety_assessment": self._fleet_safety_assessment(class_counts, total)
        }
    
    def _fleet_safety_assessment(self, class_counts: Dict, total: int) -> str:
        """–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞"""
        serious_damage_pct = class_counts[2] / total * 100
        
        if serious_damage_pct > 30:
            return "–ö–†–ò–¢–ò–ß–ù–û: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
        elif serious_damage_pct > 15:
            return "–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
        elif serious_damage_pct > 5:
            return "–ù–û–†–ú–ê–õ–¨–ù–û: –ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
        else:
            return "–û–¢–õ–ò–ß–ù–û: –ê–≤—Ç–æ–ø–∞—Ä–∫ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    # –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_path = "best_multiclass_model_v3.2.pth"
    
    if not Path(model_path).exists():
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é train_multiclass_damage_v3_2.py")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
    predictor = InDriveCarPredictor(model_path, device='cpu')
    
    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_image = "../data/integrated_multiclass_dataset/test/no_damage"
    if Path(test_image).exists():
        print("\nüöó –î–ï–ú–û: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è inDrive")
        print("="*50)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏
        image_files = list(Path(test_image).glob("*.jpg"))
        if image_files:
            result = predictor.predict_image(str(image_files[0]))
            
            print(f"üìÅ –§–∞–π–ª: {result.get('image_path', 'N/A')}")
            print(f"üéØ –°—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}")
            print(f"üõ°Ô∏è  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {result.get('safety_level', 'N/A')}")
            print(f"‚≠ê –î–æ–≤–µ—Ä–∏–µ: {result.get('trust_level', 'N/A')}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 'N/A')}%")
            print(f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('description', 'N/A')}")
            
            print(f"\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            recs = result.get('recommendations', {})
            print(f"   –î–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {recs.get('for_passenger', 'N/A')}")
            print(f"   –î–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {recs.get('for_driver', 'N/A')}")
    
    print(f"\n‚úÖ InDrive Car Predictor –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()