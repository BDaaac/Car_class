"""
ML Engineering Audit - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –∏ CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
–ê–Ω–∞–ª–∏–∑ data augmentation, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è CPU –æ–±—É—á–µ–Ω–∏—è
"""
import torch
import torch.nn as nn
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
from multiclass_damage_model import create_training_transforms, create_validation_transforms
import time
import psutil
import os

def analyze_transforms_for_car_damage():
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è car damage detection"""
    
    print("üîÑ ML ENGINEERING AUDIT - –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ò CPU –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
    print("="*70)
    
    print("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó DATA AUGMENTATION –°–¢–†–ê–¢–ï–ì–ò–ô")
    
    train_transforms = create_training_transforms()
    val_transforms = create_validation_transforms()
    
    print("   üèãÔ∏è Training Augmentations:")
    for i, transform in enumerate(train_transforms.transforms):
        transform_name = type(transform).__name__
        print(f"      {i+1}. {transform_name}: {transform}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ car damage detection
        if transform_name == "RandomHorizontalFlip":
            print("         ‚úÖ –•–û–†–û–®–û: –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã (—Ü–∞—Ä–∞–ø–∏–Ω–∞ —Å–ª–µ–≤–∞ = —Ü–∞—Ä–∞–ø–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞)")
            
        elif transform_name == "RandomRotation":
            degrees = getattr(transform, 'degrees', 'N/A')
            print(f"         ‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û: {degrees}¬∞ - –Ω–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –º–∞—à–∏–Ω—É!")
            print("         üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ¬±10¬∞ –º–∞–∫—Å–∏–º—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏")
            
        elif transform_name == "ColorJitter":
            brightness = getattr(transform, 'brightness', None)
            contrast = getattr(transform, 'contrast', None) 
            saturation = getattr(transform, 'saturation', None)
            hue = getattr(transform, 'hue', None)
            print(f"         ‚úÖ –û–¢–õ–ò–ß–ù–û: –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å—ä–µ–º–∫–∏")
            print(f"             brightness={brightness}, contrast={contrast}")
            print(f"             saturation={saturation}, hue={hue}")
            
        elif transform_name == "RandomResizedCrop":
            size = getattr(transform, 'size', None)
            scale = getattr(transform, 'scale', None)
            print(f"         ‚úÖ –•–û–†–û–®–û: size={size}, scale={scale}")
            print("         üí° –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
            
        elif transform_name == "Normalize":
            mean = getattr(transform, 'mean', None)
            std = getattr(transform, 'std', None)
            print(f"         ‚úÖ –°–¢–ê–ù–î–ê–†–¢: ImageNet –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è")
            print(f"             mean={mean}, std={std}")

def test_augmentation_effects():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–§–§–ï–ö–¢–û–í –ê–£–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ–º"
    def create_car_with_damage(damage_type="scratch"):
        img = Image.new('RGB', (400, 300), color=(100, 100, 120))  # –°–µ—Ä—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        draw = ImageDraw.Draw(img)
        
        if damage_type == "scratch":
            # –†–∏—Å—É–µ–º —Ü–∞—Ä–∞–ø–∏–Ω—É
            draw.line([(50, 100), (150, 120)], fill=(80, 60, 40), width=3)
            draw.line([(200, 80), (300, 90)], fill=(80, 60, 40), width=2)
            
        elif damage_type == "dent":
            # –†–∏—Å—É–µ–º –≤–º—è—Ç–∏–Ω—É (—Ç–µ–º–Ω–æ–µ –ø—è—Ç–Ω–æ)
            draw.ellipse([(100, 150), (140, 180)], fill=(60, 60, 70))
            
        elif damage_type == "rust":
            # –†–∏—Å—É–µ–º —Ä–∂–∞–≤—á–∏–Ω—É
            draw.ellipse([(150, 200), (200, 230)], fill=(150, 80, 30))
            
        return img
    
    train_transforms = create_training_transforms()
    val_transforms = create_validation_transforms()
    
    damage_types = ["scratch", "dent", "rust"]
    
    print("   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π:")
    
    for damage_type in damage_types:
        original_img = create_car_with_damage(damage_type)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        preserved_features = 0
        total_tests = 5
        
        for _ in range(total_tests):
            try:
                augmented = train_transforms(original_img)
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                if augmented.std() > 0.1:  # –ï—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    preserved_features += 1
            except Exception as e:
                print(f"         ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        
        preservation_rate = preserved_features / total_tests * 100
        print(f"      {damage_type.upper()}: {preservation_rate:.0f}% —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        
        if preservation_rate >= 80:
            print("         ‚úÖ –í—ã—Å–æ–∫–∞—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        elif preservation_rate >= 60:
            print("         ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –¥–µ—Ç–∞–ª–µ–π")
        else:
            print("         ‚ùå –ù–∏–∑–∫–∞—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –º–æ–≥—É—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å")

def analyze_normalization_impact():
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ car damage features"""
    
    print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –ò PREPROCESSING")
    
    # ImageNet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    imagenet_mean = [0.485, 0.456, 0.406]
    imagenet_std = [0.229, 0.224, 0.225]
    
    print("   üìä ImageNet –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:")
    print(f"      Mean (RGB): {imagenet_mean}")
    print(f"      Std (RGB):  {imagenet_std}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    car_colors = {
        "–ë–µ–ª—ã–π": [240, 240, 240],
        "–ß–µ—Ä–Ω—ã–π": [20, 20, 20], 
        "–°–µ—Ä—ã–π": [120, 120, 120],
        "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π": [192, 192, 192],
        "–°–∏–Ω–∏–π": [0, 50, 150],
        "–ö—Ä–∞—Å–Ω—ã–π": [150, 20, 20]
    }
    
    print("\n   üöó –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ü–≤–µ—Ç–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:")
    
    for color_name, rgb in car_colors.items():
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏
        normalized_rgb = []
        for i, (color_val, mean_val, std_val) in enumerate(zip(rgb, imagenet_mean, imagenet_std)):
            # RGB to [0,1], then normalize
            norm_val = (color_val/255.0 - mean_val) / std_val
            normalized_rgb.append(norm_val)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        extreme_values = [abs(val) > 3.0 for val in normalized_rgb]
        
        print(f"      {color_name:12s}: {normalized_rgb}")
        if any(extreme_values):
            print(f"                    ‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ")
        else:
            print(f"                    ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
    
    # –¶–≤–µ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    damage_colors = {
        "–¶–∞—Ä–∞–ø–∏–Ω–∞": [80, 60, 40],      # –ö–æ—Ä–∏—á–Ω–µ–≤–∞—Ç—ã–π
        "–†–∂–∞–≤—á–∏–Ω–∞": [150, 80, 30],     # –†—ã–∂–∏–π
        "–í–º—è—Ç–∏–Ω–∞": [60, 60, 70],       # –¢–µ–º–Ω—ã–π
        "–ì—Ä—è–∑—å": [90, 70, 50]          # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
    }
    
    print("\n   üîß –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π:")
    
    for damage_name, rgb in damage_colors.items():
        normalized_rgb = []
        for i, (color_val, mean_val, std_val) in enumerate(zip(rgb, imagenet_mean, imagenet_std)):
            norm_val = (color_val/255.0 - mean_val) / std_val
            normalized_rgb.append(norm_val)
        
        print(f"      {damage_name:12s}: {normalized_rgb}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏–º–æ—Å—Ç—å –æ—Ç —Ñ–æ–Ω–∞
        contrast_with_gray = abs(normalized_rgb[0] - ((120/255.0 - imagenet_mean[0]) / imagenet_std[0]))
        if contrast_with_gray > 0.5:
            print(f"                    ‚úÖ –•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å —Å–µ—Ä—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º")
        else:
            print(f"                    ‚ö†Ô∏è –°–ª–∞–±—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ —Ä–∞–∑–ª–∏—á–∏—Ç—å")

def analyze_cpu_optimization():
    """–ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è CPU –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\n4Ô∏è‚É£ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø CPU –û–ë–£–ß–ï–ù–ò–Ø")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_count = psutil.cpu_count(logical=False)
    cpu_logical = psutil.cpu_count(logical=True)
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    print(f"   üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"      –§–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞ CPU: {cpu_count}")
    print(f"      –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞ CPU: {cpu_logical}")
    print(f"      –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_gb:.1f} GB")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ num_workers
    print(f"\n   ‚öôÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DataLoader:")
    
    recommended_workers = min(2, cpu_count)  # –î–ª—è CPU –Ω–µ –±–æ–ª—å—à–µ 2
    print(f"      num_workers: {recommended_workers}")
    print(f"      –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: CPU –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –±–æ–ª—å—à–µ workers = –±–æ–ª—å—à–µ overhead")
    
    print(f"      pin_memory: False")
    print(f"      –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ù–µ—Ç GPU, pin_memory –Ω–µ –Ω—É–∂–µ–Ω")
    
    print(f"      persistent_workers: False") 
    print(f"      –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏ –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")

def benchmark_batch_sizes():
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞–∑–Ω—ã—Ö batch sizes –Ω–∞ CPU"""
    
    print("\n5Ô∏è‚É£ –ë–ï–ù–ß–ú–ê–†–ö BATCH SIZES –ù–ê CPU")
    
    from multiclass_damage_model import MulticlassDamageModel
    
    model = MulticlassDamageModel(num_classes=3)
    model.eval()  # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
    
    batch_sizes = [1, 4, 8, 16, 32]
    results = {}
    
    print("   ‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ inference –≤—Ä–µ–º–µ–Ω–∏:")
    print("      Batch | –í—Ä–µ–º—è (—Å–µ–∫) | –í—Ä–µ–º—è/—Å–µ–º–ø–ª | Throughput")
    print("      ------|-------------|-------------|------------")
    
    for batch_size in batch_sizes:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dummy_input = torch.randn(batch_size, 3, 224, 224)
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        times = []
        for _ in range(3):  # 3 –ø—Ä–æ–≥–æ–Ω–∞ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            start_time = time.time()
            with torch.no_grad():
                output = model(dummy_input)
            end_time = time.time()
            times.append(end_time - start_time)
        
        avg_time = np.mean(times)
        time_per_sample = avg_time / batch_size
        throughput = batch_size / avg_time
        
        results[batch_size] = {
            'total_time': avg_time,
            'time_per_sample': time_per_sample,
            'throughput': throughput
        }
        
        print(f"      {batch_size:3d}   | {avg_time:8.3f}   | {time_per_sample:8.3f}   | {throughput:7.1f} fps")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ batch size
    best_efficiency = max(results.items(), key=lambda x: x[1]['throughput'])
    best_batch_size = best_efficiency[0]
    
    print(f"\n   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(f"      –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch size: {best_batch_size}")
    print(f"      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π throughput: {best_efficiency[1]['throughput']:.1f} fps")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if best_batch_size > 16:
        print(f"      ‚ö†Ô∏è –î–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–µ–Ω—å—à–∏–π batch (16 –∏–ª–∏ 8)")
        print(f"      üìù –ü—Ä–∏—á–∏–Ω–∞: Gradient noise –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è generalization")
    
    return results

def analyze_memory_usage():
    """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    print("\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò")
    
    from multiclass_damage_model import MulticlassDamageModel
    
    model = MulticlassDamageModel(num_classes=3)
    
    # –ü–∞–º—è—Ç—å –º–æ–¥–µ–ª–∏
    model_params = sum(p.numel() for p in model.parameters())
    model_memory_mb = model_params * 4 / (1024**2)  # float32 = 4 bytes
    
    print(f"   üìä –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –º–æ–¥–µ–ª–∏:")
    print(f"      –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {model_params:,}")
    print(f"      –ü–∞–º—è—Ç—å –º–æ–¥–µ–ª–∏: {model_memory_mb:.1f} MB")
    
    # –ü–∞–º—è—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö batch sizes
    batch_sizes = [1, 4, 8, 16, 32]
    
    print(f"\n   üíæ –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏:")
    print("      Batch | Input (MB) | Activations | Gradients | Total (MB)")
    print("      ------|------------|-------------|-----------|----------")
    
    for batch_size in batch_sizes:
        # Input memory
        input_memory = batch_size * 3 * 224 * 224 * 4 / (1024**2)
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π (ResNet50 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
        activation_multiplier = 8  # –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è ResNet50
        activation_memory = input_memory * activation_multiplier
        
        # –ü–∞–º—è—Ç—å –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º)
        gradient_memory = model_memory_mb
        
        total_memory = model_memory_mb + activation_memory + gradient_memory
        
        print(f"      {batch_size:3d}   | {input_memory:7.1f}    | {activation_memory:8.1f}    | {gradient_memory:6.1f}    | {total_memory:7.1f}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if total_memory > 1000:  # > 1GB
            print(f"            ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
        elif total_memory > 500:  # > 500MB
            print(f"            üí° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
    available_memory_gb = psutil.virtual_memory().available / (1024**3)
    print(f"\n   üñ•Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: {available_memory_gb:.1f} GB")
    
    safe_batch_limit = None
    for batch_size in reversed(batch_sizes):
        input_memory = batch_size * 3 * 224 * 224 * 4 / (1024**2)
        activation_memory = input_memory * 8
        total_memory_gb = (model_memory_mb + activation_memory + model_memory_mb) / 1024
        
        if total_memory_gb < available_memory_gb * 0.7:  # 70% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
            safe_batch_limit = batch_size
            break
    
    if safe_batch_limit:
        print(f"   üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç batch size: {safe_batch_limit}")
    else:
        print(f"   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é –¥–∞–∂–µ –ø—Ä–∏ batch_size=1")

def estimate_training_time():
    """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\n7Ô∏è‚É£ –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –û–ë–£–ß–ï–ù–ò–Ø")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–∞
    total_samples = 650
    train_split = 0.8
    train_samples = int(total_samples * train_split)
    val_samples = total_samples - train_samples
    
    print(f"   üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
    print(f"      –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_samples}")
    print(f"      Training samples: {train_samples}")
    print(f"      Validation samples: {val_samples}")
    
    # –û—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö batch sizes
    batch_sizes = [8, 16, 32]
    epochs = 20
    
    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ batch (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π)
    time_per_batch_estimates = {8: 2.5, 16: 2.0, 32: 3.0}  # —Å–µ–∫—É–Ω–¥—ã
    
    print(f"\n   ‚è∞ –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è ({epochs} —ç–ø–æ—Ö):")
    print("      Batch | Batches | Time/Epoch | Total Time")
    print("      ------|---------|------------|------------")
    
    for batch_size in batch_sizes:
        batches_per_epoch = train_samples // batch_size
        time_per_batch = time_per_batch_estimates.get(batch_size, 2.5)
        
        # –í—Ä–µ–º—è –Ω–∞ —ç–ø–æ—Ö—É (train + validation)
        train_time_per_epoch = batches_per_epoch * time_per_batch / 60  # –º–∏–Ω—É—Ç—ã
        val_batches = val_samples // batch_size
        val_time_per_epoch = val_batches * time_per_batch * 0.5 / 60  # validation –±—ã—Å—Ç—Ä–µ–µ
        
        total_time_per_epoch = train_time_per_epoch + val_time_per_epoch
        total_training_time = total_time_per_epoch * epochs / 60  # —á–∞—Å—ã
        
        print(f"      {batch_size:3d}   | {batches_per_epoch:5d}   | {total_time_per_epoch:7.1f} min | {total_training_time:7.1f} hours")
    
    print(f"\n   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: batch_size=16 –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print(f"   üìÖ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~1.5-2 —á–∞—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –∏ CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    analyze_transforms_for_car_damage()
    test_augmentation_effects()
    analyze_normalization_impact()
    analyze_cpu_optimization()
    batch_results = benchmark_batch_sizes()
    analyze_memory_usage()
    estimate_training_time()
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø–ú –ò CPU:")
    print("="*70)
    print("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è car damage detection")
    print("‚úÖ RandomHorizontalFlip –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
    print("‚úÖ ColorJitter –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å—ä–µ–º–∫–∏")
    print("‚úÖ RandomRotation ¬±10¬∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å")
    print("‚úÖ ImageNet –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏")
    print("‚úÖ Batch size = 16 –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è CPU")
    print("‚úÖ num_workers = 2 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("‚úÖ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ~1.5-2 —á–∞—Å–∞")
    
    print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
    print("‚ùó –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –º–µ–ª–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("‚ùó –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–µ ColorJitter –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("‚ùó –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å batch size –¥–æ 16 –Ω–∞ CPU")
    print("‚ùó –°–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏")
    
    print(f"\nüìà –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø PRODUCTION:")
    print("1. –£–º–µ–Ω—å—à–∏—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è inference (—Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å batch inference –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    print("3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å model quantization –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏")
    print("4. –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()