"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –µ—ë –º–µ—Ç—Ä–∏–∫
================================================
"""

import torch
import json

def check_model_checkpoint(model_path="training_results/best_model.pth"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ checkpoint"""
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏: {model_path}")
    print("=" * 50)
    
    try:
        checkpoint = torch.load(model_path, map_location='cpu')
        
        print("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ checkpoint:")
        for key, value in checkpoint.items():
            if key == 'model_state_dict':
                print(f"  ‚Ä¢ {key}: <model weights>")
            elif isinstance(value, (int, float, str)):
                print(f"  ‚Ä¢ {key}: {value}")
            elif isinstance(value, (list, tuple)):
                print(f"  ‚Ä¢ {key}: —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–æ–π {len(value)}")
            elif isinstance(value, dict):
                print(f"  ‚Ä¢ {key}: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ {list(value.keys())}")
            else:
                print(f"  ‚Ä¢ {key}: {type(value)}")
        
        # –ò—â–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_keys = ['best_f1', 'f1', 'accuracy', 'val_f1', 'validation_f1']
        found_metrics = {}
        
        for key in metrics_keys:
            if key in checkpoint:
                found_metrics[key] = checkpoint[key]
        
        if found_metrics:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            for key, value in found_metrics.items():
                print(f"  ‚Ä¢ {key}: {value}")
        else:
            print("\n‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ F1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ checkpoint")
            
        return checkpoint
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

def check_training_stats():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ–±—É—á–µ–Ω–∏—è"""
    
    stats_path = "training_results/training_stats.json"
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_path}")
    print("=" * 50)
    
    try:
        with open(stats_path, 'r') as f:
            stats = json.load(f)
        
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
        for key, value in stats.items():
            if isinstance(value, (int, float)):
                print(f"  ‚Ä¢ {key}: {value}")
            elif isinstance(value, str):
                print(f"  ‚Ä¢ {key}: {value}")
            elif isinstance(value, list) and len(value) > 0:
                if isinstance(value[0], (int, float)):
                    print(f"  ‚Ä¢ {key}: {value[-5:]}... (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π)")
                else:
                    print(f"  ‚Ä¢ {key}: —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–æ–π {len(value)}")
        
        # –ò—â–µ–º –º–µ—Ç—Ä–∏–∫–∏ F1
        f1_keys = ['f1_score', 'best_f1', 'val_f1', 'validation_f1', 'weighted_f1']
        for key in f1_keys:
            if key in stats:
                print(f"\nüéØ –ù–∞–π–¥–µ–Ω F1: {key} = {stats[key]}")
                
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

if __name__ == "__main__":
    print("üîç –ê–ù–ê–õ–ò–ó –û–ë–£–ß–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º checkpoint
    checkpoint = check_model_checkpoint()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = check_training_stats()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 20)
    
    if checkpoint and 'best_f1' not in checkpoint:
        print("‚Ä¢ –í checkpoint –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ F1 score")
        print("‚Ä¢ –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ F1=0.7383 –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
        
    if stats and 'f1_score' in stats:
        print(f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º F1 –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['f1_score']}")
    else:
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F1=0.7383")