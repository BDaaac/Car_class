import torch
import json
import os

def check_finetuned_model():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã fine-tuning –º–æ–¥–µ–ª–∏"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
    base_model_path = "training_results/best_model.pth"
    finetuned_model_path = "training_results/finetuned_best_model.pth"
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í FINE-TUNING")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
    if os.path.exists(base_model_path):
        base_checkpoint = torch.load(base_model_path, map_location='cpu', weights_only=False)
        if isinstance(base_checkpoint, dict) and 'val_f1' in base_checkpoint:
            base_f1 = base_checkpoint['val_f1']
            print(f"üìä –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å F1-score: {base_f1:.4f}")
        else:
            print("‚ö†Ô∏è  –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fine-tuned –º–æ–¥–µ–ª—å
    if os.path.exists(finetuned_model_path):
        print(f"‚úÖ Fine-tuned –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_mb = os.path.getsize(finetuned_model_path) / (1024 * 1024)
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")
        
        try:
            finetuned_checkpoint = torch.load(finetuned_model_path, map_location='cpu', weights_only=False)
            
            if isinstance(finetuned_checkpoint, dict):
                print("üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ checkpoint:")
                for key in finetuned_checkpoint.keys():
                    print(f"   ‚Ä¢ {key}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if 'val_f1' in finetuned_checkpoint:
                    finetuned_f1 = finetuned_checkpoint['val_f1']
                    print(f"üéØ Fine-tuned –º–æ–¥–µ–ª—å F1-score: {finetuned_f1:.4f}")
                    
                    if 'val_f1' in locals() and 'base_f1' in locals():
                        improvement = finetuned_f1 - base_f1
                        improvement_pct = (improvement / base_f1) * 100
                        print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:+.4f} ({improvement_pct:+.2f}%)")
                
                if 'val_metrics' in finetuned_checkpoint:
                    metrics = finetuned_checkpoint['val_metrics']
                    print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
                    for metric, value in metrics.items():
                        if isinstance(value, (int, float)):
                            print(f"   ‚Ä¢ {metric}: {value:.4f}")
                
                if 'epoch' in finetuned_checkpoint:
                    print(f"üî¢ –≠–ø–æ—Ö–∞: {finetuned_checkpoint['epoch']}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fine-tuned –º–æ–¥–µ–ª–∏: {e}")
    else:
        print("‚ùå Fine-tuned –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ fine-tuning
    log_files = [
        "finetuning_results.json",
        "finetuning_log.txt", 
        "training_results/finetuning_stats.json"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            print(f"\nüìÑ –ù–∞–π–¥–µ–Ω –ª–æ–≥ —Ñ–∞–π–ª: {log_file}")
            try:
                if log_file.endswith('.json'):
                    with open(log_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        print(f"üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                        for key, value in data.items():
                            print(f"   ‚Ä¢ {key}: {value}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")

if __name__ == "__main__":
    check_finetuned_model()