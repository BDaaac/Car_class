import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import torch.nn.functional as F
import os
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
from multiclass_damage_model import MulticlassDamageModel

def load_model(model_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    model = MulticlassDamageModel(num_classes=3)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint (—Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å PyTorch 2.6)
    checkpoint = torch.load(model_path, map_location=device, weights_only=False)
    
    if 'model_state_dict' in checkpoint:
        model.load_state_dict(checkpoint['model_state_dict'])
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –≠–ø–æ—Ö–∞: {checkpoint.get('epoch', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        if 'f1_score' in checkpoint:
            print(f"üìä F1-score –º–æ–¥–µ–ª–∏: {checkpoint['f1_score']:.4f}")
    else:
        model.load_state_dict(checkpoint)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
    
    model.to(device)
    model.eval()
    return model, device

def preprocess_image(image_path):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                           std=[0.229, 0.224, 0.225])
    ])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(image_path).convert('RGB')
    image_tensor = transform(image).unsqueeze(0)  # –î–æ–±–∞–≤–ª—è–µ–º batch dimension
    
    return image_tensor, image

def analyze_dirt_level(image):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    import numpy as np
    from PIL import ImageFilter, ImageStat
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
    img_array = np.array(image)
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (–≥—Ä—è–∑—å —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ)
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ
    unique_colors_r = len(np.unique(img_array[:,:,0]))
    unique_colors_g = len(np.unique(img_array[:,:,1])) 
    unique_colors_b = len(np.unique(img_array[:,:,2]))
    color_diversity = (unique_colors_r + unique_colors_g + unique_colors_b) / 3
    
    # 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (–≥—Ä—è–∑—å —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
    gray = image.convert('L')
    contrast = ImageStat.Stat(gray).stddev[0]
    
    # 3. –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤
    hsv = image.convert('HSV')
    hsv_array = np.array(hsv)
    saturation = np.mean(hsv_array[:,:,1])  # S –∫–∞–Ω–∞–ª
    
    # 4. –ê–Ω–∞–ª–∏–∑ "–∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö" –æ—Ç—Ç–µ–Ω–∫–æ–≤ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –≥—Ä—è–∑–∏)
    # –ò—â–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å –∫–æ—Ä–∏—á–Ω–µ–≤—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏
    brown_mask = (
        (img_array[:,:,0] > img_array[:,:,2]) &  # R > B
        (img_array[:,:,1] > img_array[:,:,2]) &  # G > B  
        (img_array[:,:,0] < 150) &  # –ù–µ —Å–ª–∏—à–∫–æ–º —è—Ä–∫–∏–π
        (img_array[:,:,1] < 120)    # –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
    )
    brown_ratio = np.sum(brown_mask) / (img_array.shape[0] * img_array.shape[1])
    
    # 5. –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ (–≥—Ä—è–∑—å –¥–µ–ª–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π)
    edge_image = gray.filter(ImageFilter.FIND_EDGES)
    edge_intensity = np.mean(np.array(edge_image))
    
    # 6. –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —è—Ä–∫–æ—Å—Ç–∏
    brightness = np.mean(img_array)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–∏—Å—Ç–æ—Ç—ã
    dirt_score = 0
    
    # –ù–∏–∑–∫–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = –≥—Ä—è–∑—å
    if color_diversity < 80:
        dirt_score += 2
    elif color_diversity < 120:
        dirt_score += 1
    
    # –ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç = –≥—Ä—è–∑—å  
    if contrast < 25:
        dirt_score += 2
    elif contrast < 40:
        dirt_score += 1
    
    # –ù–∏–∑–∫–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å = –≥—Ä—è–∑—å
    if saturation < 60:
        dirt_score += 1.5
    elif saturation < 100:
        dirt_score += 0.5
    
    # –ú–Ω–æ–≥–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤ = –≥—Ä—è–∑—å
    if brown_ratio > 0.15:
        dirt_score += 2
    elif brown_ratio > 0.08:
        dirt_score += 1
    
    # –°–ª–∞–±—ã–µ –∫—Ä–∞—è = –≥—Ä—è–∑—å (–∑–∞–º—ã–ª–µ–Ω–Ω–æ—Å—Ç—å)
    if edge_intensity < 15:
        dirt_score += 1.5
    elif edge_intensity < 25:
        dirt_score += 0.5
    
    # –ù–∏–∑–∫–∞—è —è—Ä–∫–æ—Å—Ç—å = –≤–æ–∑–º–æ–∂–Ω–∞—è –≥—Ä—è–∑—å
    if brightness < 90:
        dirt_score += 1
    elif brightness < 110:
        dirt_score += 0.5
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
    if dirt_score >= 6:
        return "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è", "ÔøΩ", f"(–∏–Ω–¥–µ–∫—Å –≥—Ä—è–∑–∏: {dirt_score:.1f})"
    elif dirt_score >= 4:
        return "–≥—Ä—è–∑–Ω–∞—è", "üü´", f"(–∏–Ω–¥–µ–∫—Å –≥—Ä—è–∑–∏: {dirt_score:.1f})"
    elif dirt_score >= 2:
        return "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è", "üü®", f"(–∏–Ω–¥–µ–∫—Å –≥—Ä—è–∑–∏: {dirt_score:.1f})"
    elif dirt_score >= 1:
        return "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è", "üü©", f"(–∏–Ω–¥–µ–∫—Å –≥—Ä—è–∑–∏: {dirt_score:.1f})"
    else:
        return "–æ—á–µ–Ω—å —á–∏—Å—Ç–∞—è", "‚ú®", f"(–∏–Ω–¥–µ–∫—Å –≥—Ä—è–∑–∏: {dirt_score:.1f})"

def get_human_comment(predicted_class, confidence, dirt_status):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    comments = []
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º
    if predicted_class == 'no_damage':
        if confidence > 0.8:
            comments.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! üëå")
            comments.append("–í–∏–¥–∏–º—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        elif confidence > 0.6:
            comments.append("–ú–∞—à–∏–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ, –Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ")
        else:
            comments.append("–°–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ - –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä")
    
    elif predicted_class == 'minor_damage':
        if confidence > 0.7:
            comments.append("–ï—Å—Ç—å –º–µ–ª–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è - –Ω–∏—á–µ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ üîß")
            comments.append("–í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—É —Ü–∞—Ä–∞–ø–∏–Ω –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –≤–º—è—Ç–∏–Ω")
            comments.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏–≥–æ–¥–µ–Ω –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
        else:
            comments.append("–ü–æ—Ö–æ–∂–µ –Ω–∞ –º–µ–ª–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
    
    else:  # major_damage
        if confidence > 0.9:
            comments.append("–ê–í–¢–û–ú–û–ë–ò–õ–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–†–£–®–ï–ù! ‚ò†Ô∏è")
            comments.append("–ú–∞—à–∏–Ω–∞ –ù–ï –ü–†–ò–ì–û–î–ù–ê –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            comments.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è")
        elif confidence > 0.8:
            comments.append("–ú–∞—à–∏–Ω–∞ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–∞! üö®")
            comments.append("–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç")
            comments.append("–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞")
        elif confidence > 0.6:
            comments.append("–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è - –Ω—É–∂–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞")
            comments.append("–í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–π —Ä–µ–º–æ–Ω—Ç")
        else:
            comments.append("–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —á–∏—Å—Ç–æ—Ç–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    if "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è" in dirt_status:
        comments.append("–ú–∞—à–∏–Ω–∞ –≤ —É–∂–∞—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ —á–∏—Å—Ç–æ—Ç–µ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
        comments.append("–°—Ä–æ—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞")
    elif "–≥—Ä—è–∑–Ω–∞—è" in dirt_status:
        comments.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–µ–π –º–æ–π–∫–µ")
        comments.append("–ì—Ä—è–∑—å –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    elif "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è" in dirt_status:
        comments.append("–ù–µ–±–æ–ª—å—à–∞—è –ø—ã–ª—å - –≤ —Ü–µ–ª–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ")
    elif "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è" in dirt_status:
        comments.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∏—Å—Ç–æ—Ç—ã")
    else:
        comments.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π - –æ—Ç–ª–∏—á–Ω–æ –≤–∏–¥–Ω–æ –≤—Å–µ –¥–µ—Ç–∞–ª–∏")
    
    return comments

def predict_damage(model, image_tensor, device, original_image):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —á–∏—Å—Ç–æ—Ç—ã"""
    class_names = ['no_damage', 'minor_damage', 'major_damage']
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—è–∑—å —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    dirt_status, dirt_emoji, dirt_details = analyze_dirt_level(original_image)
    
    with torch.no_grad():
        image_tensor = image_tensor.to(device)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        outputs = model(image_tensor)
        probabilities = F.softmax(outputs, dim=1)
        confidence, predicted = torch.max(probabilities, 1)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        probs = probabilities.cpu().numpy()[0]
        predicted_class = class_names[predicted.item()]
        confidence_score = confidence.item()
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        human_comments = get_human_comment(predicted_class, confidence_score, dirt_status)
        
        return predicted_class, confidence_score, probs, class_names, dirt_status, dirt_emoji, human_comments, dirt_details

def analyze_image(image_filename):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    # –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    data_folder = r"C:\Users\–î–∏–º–∞—à\Desktop\python\hackaton\data"
    model_path = r"C:\Users\–î–∏–º–∞—à\Desktop\python\hackaton\car_state\training_results\finetuned_best_model.pth"
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = os.path.join(data_folder, image_filename)
    
    print("üöó –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    print("="*60)
    print(f"üìÇ –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {data_folder}")
    print(f"üñºÔ∏è  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_filename}")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(image_path):
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ:")
        try:
            files = [f for f in os.listdir(data_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp'))]
            for i, file in enumerate(files, 1):
                print(f"   {i}. {file}")
        except:
            print("   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
        return
    
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        model, device = load_model(model_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("üñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        image_tensor, original_image = preprocess_image(image_path)
        print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {original_image.size}")
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        print("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π...")
        predicted_class, confidence, probabilities, class_names, dirt_status, dirt_emoji, human_comments, dirt_details = predict_damage(model, image_tensor, device, original_image)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("="*60)
        
        print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {predicted_class}")
        print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
        print(f"üßº –ß–∏—Å—Ç–æ—Ç–∞: {dirt_emoji} {dirt_status} {dirt_details}")
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence > 0.8:
            confidence_status = "üü¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        elif confidence > 0.6:
            confidence_status = "üü° –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        else:
            confidence_status = "üî¥ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {confidence_status}")
        
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        for name, prob in zip(class_names, probabilities):
            bar_length = int(prob * 30)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            bar = "‚ñà" * bar_length + "‚ñë" * (30 - bar_length)
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
            if name == 'no_damage':
                emoji = "‚úÖ"
            elif name == 'minor_damage':
                emoji = "üîß"
            else:
                emoji = "üö®"
                
            print(f"   {emoji} {name:15}: {prob:.1%} |{bar}|")
        
        print("\n" + "="*60)
        
        # –ß–µ–ª–æ–≤–µ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        print("ÔøΩ –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        for i, comment in enumerate(human_comments, 1):
            if i == 1:
                print(f"   üîç {comment}")
            else:
                print(f"   ‚Ä¢ {comment}")
        
        print("\n" + "="*60)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if predicted_class == 'major_damage':
            if confidence > 0.9:
                print("‚ò†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
                print("   ‚Ä¢ –ê–í–¢–û–ú–û–ë–ò–õ–¨ –ù–ï –ü–û–î–õ–ï–ñ–ò–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Æ!")
                print("   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—Ç—Ä–∞—Ö–æ–≤—É—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
                print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã")
                print("   ‚Ä¢ –ù–ï –ü–´–¢–ê–¢–¨–°–Ø –≠–ö–°–ü–õ–£–ê–¢–ò–†–û–í–ê–¢–¨!")
            elif confidence > 0.7:
                print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø:")
                print("   ‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é!")
                print("   ‚Ä¢ –í—ã–∑–≤–∞—Ç—å —ç–≤–∞–∫—É–∞—Ç–æ—Ä")
                print("   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
                print("   ‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞")
            else:
                print("‚ö†Ô∏è  –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê –°–ï–†–¨–ï–ó–ù–´–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø:")
                print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")
                print("   ‚Ä¢ –ù–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å - –ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è")
        elif predicted_class == 'minor_damage':
            print("üîß –ü–õ–ê–ù–û–í–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï:")
            print("   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –º–µ–ª–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ")
            print("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –º–æ–∂–Ω–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å")
            print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        elif predicted_class == 'no_damage' and confidence > 0.8:
            print("‚úÖ –û–¢–õ–ò–ß–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
            print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            print("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            print("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–µ/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∏—Å—Ç–æ—Ç–µ
        print(f"\nüßº –°–û–°–¢–û–Ø–ù–ò–ï –ß–ò–°–¢–û–¢–´:")
        if "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è" in dirt_status:
            print("   üü§ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–Ø–ó–ù–ï–ù–ù–û–°–¢–¨:")
            print("   ‚Ä¢ –°—Ä–æ—á–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ –∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥")
            print("   ‚Ä¢ –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ö–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞")
            print("   ‚Ä¢ –ì—Ä—è–∑—å —Å–µ—Ä—å–µ–∑–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
            print("   ‚Ä¢ –ü–æ—Å–ª–µ –º–æ–π–∫–∏ - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        elif dirt_status == "–≥—Ä—è–∑–Ω–∞—è":
            print("   üü´ –°–ò–õ–¨–ù–û–ï –ó–ê–ì–†–Ø–ó–ù–ï–ù–ò–ï:")
            print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞")
            print("   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞")
            print("   ‚Ä¢ –ü–æ—Å–ª–µ –º–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        elif dirt_status == "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è":
            print("   üü® –õ–ï–ì–ö–û–ï –ó–ê–ì–†–Ø–ó–ù–ï–ù–ò–ï:")
            print("   ‚Ä¢ –û–±—ã—á–Ω–∞—è –º–æ–π–∫–∞ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ–º")
            print("   ‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–º—ã—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
            print("   ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ª—É—á—à–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∏—Å—Ç–æ—Ç—É")
        elif dirt_status == "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è":
            print("   üü© –•–û–†–û–®–ê–Ø –ß–ò–°–¢–û–¢–ê:")
            print("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø—Ä–∏–µ–º–ª–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            print("   ‚Ä¢ –õ–µ–≥–∫–∞—è –º–æ–π–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–∞")
            print("   ‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        elif dirt_status == "–æ—á–µ–Ω—å —á–∏—Å—Ç–∞—è":
            print("   ‚ú® –ò–î–ï–ê–õ–¨–ù–ê–Ø –ß–ò–°–¢–û–¢–ê:")
            print("   ‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            print("   ‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π")
            print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–∏—Å—Ç–æ—Ç—ã")
            print("   ‚Ä¢ –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")
        
        if confidence < 0.6:
            print("\n‚ö†Ô∏è  –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
            print("   ‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ")
            print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã")
            print("   ‚Ä¢ –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º")
        
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º"""
    if len(sys.argv) > 1:
        # –ò–º—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        image_filename = sys.argv[1]
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
        print("üöó –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        print("="*60)
        image_filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ").strip()
        
        if not image_filename:
            print("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ!")
            return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    analyze_image(image_filename)

if __name__ == "__main__":
    main()