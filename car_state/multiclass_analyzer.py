"""
–ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (3 –∫–ª–∞—Å—Å–∞) –∏ —á–∏—Å—Ç–æ—Ç—ã (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
"""
import torch
import torch.nn.functional as F
from torchvision import transforms
from PIL import Image
import numpy as np
from pathlib import Path
from typing import Dict, Any, Tuple, Optional
import json
import sys
import os

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
try:
    from .multiclass_damage_model import MulticlassDamageModel, DamageClassifier
    from .dirt_analyzer import DirtAnalyzer, create_human_readable_cleanliness_report
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    if current_dir not in sys.path:
        sys.path.append(current_dir)
    from multiclass_damage_model import MulticlassDamageModel, DamageClassifier
    from dirt_analyzer import DirtAnalyzer, create_human_readable_cleanliness_report

class ComprehensiveCarAnalyzer:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (3 –∫–ª–∞—Å—Å–∞) + —á–∏—Å—Ç–æ—Ç—É (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    """
    
    def __init__(self, model_path: Optional[str] = None, device: str = 'cpu'):
        self.device = device
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        self.damage_classifier = DamageClassifier(model_path, device)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–∏—Å—Ç–æ—Ç—ã
        self.dirt_analyzer = DirtAnalyzer()
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                               std=[0.229, 0.224, 0.225])
        ])
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
    
    def load_model(self, model_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        self.damage_classifier.load_model(model_path)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
    
    def analyze_image(self, image_path: str, car_name: str = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å") -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            car_name: –ù–∞–∑–≤–∞–Ω–∏–µ/–º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path).convert('RGB')
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        damage_result = self._analyze_damage(image)
        
        # –ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã
        cleanliness_result = self._analyze_cleanliness(image)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        comprehensive_report = self._create_comprehensive_report(
            car_name, damage_result, cleanliness_result
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'car_name': car_name,
            'damage_analysis': damage_result,
            'cleanliness_analysis': cleanliness_result,
            'comprehensive_report': comprehensive_report,
            'recommendations': self._generate_recommendations(damage_result, cleanliness_result),
            'overall_status': self._determine_overall_status(damage_result, cleanliness_result),
            'technical_summary': {
                'damage_confidence': damage_result['confidence'],
                'damage_probabilities': damage_result['class_probabilities'],
                'dirt_score': cleanliness_result['dirt_score'],
                'analysis_method': 'multiclass_damage + cv_cleanliness'
            }
        }
        
        return result
    
    def _analyze_damage(self, image: Image.Image) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        image_tensor = self.transform(image)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        probabilities, predicted_class, confidence = self.damage_classifier.predict_single(image_tensor)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        damage_level = self.damage_classifier.classify_damage_level(probabilities)
        
        return damage_level
    
    def _analyze_cleanliness(self, image: Image.Image) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã"""
        return self.dirt_analyzer.analyze_cleanliness(image)
    
    def _create_comprehensive_report(self, car_name: str, damage_result: Dict, cleanliness_result: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report = f"üöó {car_name} - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        report += "=" * 50 + "\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        damage_icons = {
            'no_damage': '‚úÖ',
            'minor_damage': 'üü°',
            'major_damage': 'üî¥',
            'suspected_damage': 'üü†',
            'requires_inspection': '‚ùì'
        }
        
        severity_map = {
            'none': '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
            'low': '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è',
            'high': '—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è',
            'uncertain': '—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'
        }
        
        damage_icon = damage_icons.get(damage_result['status'], '‚ùì')
        severity_text = severity_map.get(damage_result['severity'], '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è')
        
        report += f"{damage_icon} –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø:\n"
        report += f"   –°—Ç–∞—Ç—É—Å: {damage_result['description']}\n"
        report += f"   –°—Ç–µ–ø–µ–Ω—å: {severity_text}\n"
        
        if damage_result['status'] != 'no_damage':
            report += f"   –î–µ—Ç–∞–ª–∏:\n"
            probs = damage_result['class_probabilities']
            if probs['minor_damage'] > 0.1:
                report += f"     ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö: {probs['minor_damage']:.1%}\n"
            if probs['major_damage'] > 0.1:
                report += f"     ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {probs['major_damage']:.1%}\n"
        
        report += "\n"
        
        # –ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã
        cleanliness_icons = {
            'clean': 'üßΩ',
            'slightly_dirty': 'üü°',
            'dirty': 'üü§'
        }
        
        clean_icon = cleanliness_icons.get(cleanliness_result['status'], '‚ùì')
        
        report += f"{clean_icon} –ß–ò–°–¢–û–¢–ê:\n"
        report += f"   {cleanliness_result['description']}\n"
        report += f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {cleanliness_result['recommendation']}\n\n"
        
        return report
    
    def _generate_recommendations(self, damage_result: Dict, cleanliness_result: Dict) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º
        if damage_result['status'] == 'major_damage':
            recommendations.extend([
                "üîß –°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞",
                "üìã –°–¥–µ–ª–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π",
                "‚òéÔ∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"
            ])
        elif damage_result['status'] == 'minor_damage':
            recommendations.extend([
                "üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º",
                "üìù –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏",
                "‚ö†Ô∏è –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
            ])
        elif damage_result['status'] == 'requires_inspection':
            recommendations.extend([
                "üë®‚Äçüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
                "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤",
                "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏"
            ])
        elif damage_result['status'] == 'no_damage':
            recommendations.append("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∏—Å—Ç–æ—Ç–µ
        if cleanliness_result['status'] == 'dirty':
            recommendations.extend([
                "üöø –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                "üßΩ –£–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –æ—Å–æ–±–æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–∫–∞–º"
            ])
        elif cleanliness_result['status'] == 'slightly_dirty':
            recommendations.append("üßº –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Å–≤–µ–∂–∏—Ç—å –º–æ–π–∫–æ–π")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä",
            "üì± –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
        ])
        
        return recommendations
    
    def _determine_overall_status(self, damage_result: Dict, cleanliness_result: Dict) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ —á–∏—Å—Ç–æ—Ç—ã
        if damage_result['status'] == 'major_damage':
            overall = 'critical'
            description = "–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è"
            color = 'red'
        elif damage_result['status'] == 'minor_damage':
            overall = 'attention_needed'
            description = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            color = 'yellow'
        elif damage_result['status'] == 'requires_inspection':
            overall = 'uncertain'
            description = "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            color = 'orange'
        elif cleanliness_result['status'] == 'dirty':
            overall = 'maintenance_needed'
            description = "–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"
            color = 'brown'
        else:
            overall = 'good'
            description = "–í —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
            color = 'green'
        
        return {
            'status': overall,
            'description': description,
            'color': color,
            'priority': self._get_priority_level(damage_result, cleanliness_result)
        }
    
    def _get_priority_level(self, damage_result: Dict, cleanliness_result: Dict) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (1-5, –≥–¥–µ 5 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)"""
        if damage_result['status'] == 'major_damage':
            return 5
        elif damage_result['status'] == 'minor_damage':
            return 3
        elif damage_result['status'] == 'requires_inspection':
            return 2
        elif cleanliness_result['status'] == 'dirty':
            return 1
        else:
            return 0
    
    def analyze_and_save_report(self, image_path: str, car_name: str = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", 
                               save_path: Optional[str] = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            car_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        result = self.analyze_image(image_path, car_name)
        
        if save_path:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON –æ—Ç—á–µ—Ç
            json_path = save_path.replace('.txt', '.json') if save_path.endswith('.txt') else f"{save_path}.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
            txt_path = save_path if save_path.endswith('.txt') else f"{save_path}.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(result['comprehensive_report'])
                f.write("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
                for i, rec in enumerate(result['recommendations'], 1):
                    f.write(f"{i}. {rec}\n")
            
            print(f"üíæ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_path}, {txt_path}")
        
        return result

def quick_analyze(image_path: str, model_path: str = "artifacts/multiclass_damage_model.pth", 
                 car_name: str = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å") -> str:
    """
    –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    
    Args:
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        model_path: –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        car_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        
    Returns:
        str: –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = ComprehensiveCarAnalyzer(model_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        result = analyzer.analyze_image(image_path, car_name)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print(result['comprehensive_report'])
        print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(result['recommendations'], 1):
            print(f"{i}. {rec}")
        
        return result['comprehensive_report']
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
        print(error_msg)
        return error_msg

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ –º–æ–¥–µ–ª–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
    analyzer = ComprehensiveCarAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = Image.new('RGB', (224, 224), (100, 150, 200))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã
    cleanliness_result = analyzer._analyze_cleanliness(test_image)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å—Ç–æ—Ç—ã: {cleanliness_result['description']}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    model_path = "artifacts/multiclass_damage_model.pth"
    if Path(model_path).exists():
        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é: {model_path}")
        # result = quick_analyze("path/to/test/image.jpg", model_path, "Test Car")
    else:
        print(f"\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ train_multiclass_damage.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    
    print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")