"""
–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
========================================================================
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import torch
import torch.nn.functional as F
import cv2
import numpy as np
from car_zone_detector import CarDamageAnalyzer, test_car_analysis
import json
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleZoneAnalyzer:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–æ–Ω –±–µ–∑ –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, model_path="training_results/best_model.pth"):
        self.analyzer = CarDamageAnalyzer(model_path)
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def analyze_car_with_real_model(self, image_path):
        """–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
        try:
            report = self.analyzer.analyze_car(image_path)
            return report
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def create_demo_report(self, save_files=True):
        """–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ-–æ—Ç—á—ë—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        
        # –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not Path("demo_car.jpg").exists():
            logger.info("–°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            demo_image = np.ones((600, 800, 3), dtype=np.uint8) * 220
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            cv2.rectangle(demo_image, (200, 150), (600, 450), (100, 100, 100), -1)
            cv2.rectangle(demo_image, (250, 50), (550, 200), (80, 80, 80), -1)
            cv2.rectangle(demo_image, (250, 200), (550, 300), (120, 120, 120), -1)
            cv2.rectangle(demo_image, (250, 350), (550, 450), (90, 90, 90), -1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
            cv2.line(demo_image, (150, 200), (180, 280), (255, 0, 0), 3)
            cv2.circle(demo_image, (400, 250), 30, (60, 60, 60), -1)
            cv2.rectangle(demo_image, (520, 380), (580, 420), (200, 0, 0), -1)
            
            cv2.imwrite("demo_car.jpg", demo_image)
            logger.info("‚úÖ –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é...")
        report = self.analyze_car_with_real_model("demo_car.jpg")
        
        if report:
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.print_detailed_report(report)
            
            if save_files:
                self.save_enhanced_report(report)
            
            return report
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç")
            return None
    
    def print_detailed_report(self, report):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
        
        print("\n" + "="*60)
        print("üöó –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –ê–ù–ê–õ–ò–ó–ê –ê–í–¢–û–ú–û–ë–ò–õ–Ø –° –†–ï–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ")
        print("="*60)
        
        print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫—É–∑–æ–≤–∞: {report.overall_integrity:.1f}%")
        print(f"‚Ä¢ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {report.overall_grade}")
        print(f"‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö –∑–æ–Ω: {report.damaged_zones} –∏–∑ {report.total_zones}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report.overall_integrity >= 90:
            recommendation = "‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
        elif report.overall_integrity >= 75:
            recommendation = "üü° –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        elif report.overall_integrity >= 50:
            recommendation = "üü† –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞"
        else:
            recommendation = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞"
        
        print(f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ó–û–ù–ê–ú:")
        print("-" * 50)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–æ–Ω—ã –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
        sorted_zones = sorted(report.zones, key=lambda x: x.integrity_score)
        
        for zone in sorted_zones:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            if zone.damage_class == "no_damage":
                status = "‚úÖ"
                color = "–ó–ï–õ–Å–ù–´–ô"
            elif zone.damage_class == "minor_damage":
                status = "‚ö†Ô∏è"
                color = "–ñ–Å–õ–¢–´–ô"
            else:
                status = "‚ùå" 
                color = "–ö–†–ê–°–ù–´–ô"
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
            zone_name = zone.zone_name.replace('_', ' ').title()
            
            print(f"\n{status} {zone_name.upper()}:")
            print(f"   ‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {zone.integrity_score:.1f}%")
            print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {zone.damage_class.replace('_', ' ').title()}")
            print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {zone.confidence*100:.1f}%")
            print(f"   ‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –∑–æ–Ω–∞ –Ω–∞ —Å—Ö–µ–º–µ: {color}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        print(f"\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
        print("-" * 30)
        
        # –ü–æ–¥—Å—á—ë—Ç –ø–æ —Ç–∏–ø–∞–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        no_damage_count = sum(1 for z in report.zones if z.damage_class == "no_damage")
        minor_damage_count = sum(1 for z in report.zones if z.damage_class == "minor_damage")
        major_damage_count = sum(1 for z in report.zones if z.damage_class == "major_damage")
        
        print(f"‚Ä¢ –ù–µ–ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –∑–æ–Ω—ã: {no_damage_count}")
        print(f"‚Ä¢ –ó–æ–Ω—ã —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {minor_damage_count}")
        print(f"‚Ä¢ –ó–æ–Ω—ã —Å —Å–µ—Ä—å—ë–∑–Ω—ã–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {major_damage_count}")
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        avg_confidence = np.mean([z.confidence for z in report.zones])
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {avg_confidence*100:.1f}%")
        
        # –°–∞–º–∞—è –∏ –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –∑–æ–Ω—ã
        best_zone = max(report.zones, key=lambda x: x.integrity_score)
        worst_zone = min(report.zones, key=lambda x: x.integrity_score)
        
        print(f"‚Ä¢ –õ—É—á—à–∞—è –∑–æ–Ω–∞: {best_zone.zone_name.replace('_', ' ').title()} ({best_zone.integrity_score:.1f}%)")
        print(f"‚Ä¢ –•—É–¥—à–∞—è –∑–æ–Ω–∞: {worst_zone.zone_name.replace('_', ' ').title()} ({worst_zone.integrity_score:.1f}%)")
    
    def save_enhanced_report(self, report):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç"""
        
        # –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JSON –æ—Ç—á—ë—Ç
        enhanced_report = {
            "analysis_summary": {
                "overall_integrity": report.overall_integrity,
                "overall_grade": report.overall_grade,
                "total_zones": report.total_zones,
                "damaged_zones": report.damaged_zones,
                "analysis_timestamp": "2025-09-14T00:00:00Z"
            },
            "zone_details": [],
            "recommendations": [],
            "model_info": {
                "model_type": "MulticlassDamageModel",
                "classes": ["no_damage", "minor_damage", "major_damage"],
                "confidence_threshold": 0.5
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–æ–Ω–∞–º
        for zone in report.zones:
            zone_detail = {
                "zone_name": zone.zone_name,
                "display_name": zone.zone_name.replace('_', ' ').title(),
                "integrity_score": round(zone.integrity_score, 2),
                "damage_class": zone.damage_class,
                "damage_probability": round(zone.damage_probability * 100, 2),
                "model_confidence": round(zone.confidence * 100, 2),
                "bbox": zone.bbox,
                "color_code": self._get_color_code(zone.damage_class)
            }
            enhanced_report["zone_details"].append(zone_detail)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report.overall_integrity >= 90:
            enhanced_report["recommendations"].append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –¢–û")
        elif report.overall_integrity >= 75:
            enhanced_report["recommendations"].append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–æ–Ω—ã —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        elif report.overall_integrity >= 50:
            enhanced_report["recommendations"].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–º–æ–Ω—Ç –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö –∑–æ–Ω")
        else:
            enhanced_report["recommendations"].append("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–æ–Ω–∞–º
        for zone in report.zones:
            if zone.damage_class == "major_damage":
                enhanced_report["recommendations"].append(f"–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∑–æ–Ω—ã: {zone.zone_name.replace('_', ' ')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open("enhanced_car_analysis_report.json", "w", encoding="utf-8") as f:
            json.dump(enhanced_report, f, ensure_ascii=False, indent=2)
        
        logger.info("üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: enhanced_car_analysis_report.json")
    
    def _get_color_code(self, damage_class):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"""
        color_map = {
            "no_damage": "#00FF00",      # –ó–µ–ª—ë–Ω—ã–π
            "minor_damage": "#FFA500",   # –û—Ä–∞–Ω–∂–µ–≤—ã–π  
            "major_damage": "#FF0000"    # –ö—Ä–∞—Å–Ω—ã–π
        }
        return color_map.get(damage_class, "#808080")

def run_enhanced_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    
    print("üöó –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ó–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –° –†–ï–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ")
    print("=" * 65)
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SimpleZoneAnalyzer()
        
        # –°–æ–∑–¥–∞—ë–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
        report = analyzer.create_demo_report()
        
        if report:
            print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            print("   ‚Ä¢ demo_car.jpg - –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
            print("   ‚Ä¢ test_car_analysis_result.jpg - –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π")
            print("   ‚Ä¢ enhanced_car_analysis_report.json - –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON –æ—Ç—á—ë—Ç")
            print("   ‚Ä¢ test_car_analysis_result.json - –±–∞–∑–æ–≤—ã–π JSON –æ—Ç—á—ë—Ç")
            
            print("\nüîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:")
            print("   analyzer = SimpleZoneAnalyzer()")
            print("   report = analyzer.analyze_car_with_real_model('path/to/car/image.jpg')")
            print("   analyzer.print_detailed_report(report)")
            
            return True
        else:
            print("‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    run_enhanced_demo()